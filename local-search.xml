<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>MyBatis框架</title>
    <link href="/posts/9cf7da51c067/"/>
    <url>/posts/9cf7da51c067/</url>
    
    <content type="html"><![CDATA[<h1 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h1><h2 id="1、mybatis简介"><a href="#1、mybatis简介" class="headerlink" title="1、mybatis简介"></a>1、mybatis简介</h2><h3 id="1-1-mybatis历史"><a href="#1-1-mybatis历史" class="headerlink" title="1.1 mybatis历史"></a>1.1 mybatis历史</h3><p>MyBatis最初是Apache的一个开源项目iBatis, 2010年6月这个项目由Apache Software Foundation迁<br>移到了Google Code。随着开发团队转投Google Code旗下， iBatis3.x正式更名为MyBatis。代码于<br><strong>2013年11月</strong>迁移到Github。<br>iBatis一词来源于“internet”和“abatis”的组合，是一个基于Java的持久层框架。 iBatis提供的持久层框架<br>包括SQL Maps和Data Access Objects（DAO）。</p><h3 id="1-2-mybatis特性"><a href="#1-2-mybatis特性" class="headerlink" title="1.2 mybatis特性"></a>1.2 mybatis特性</h3><p>1） MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架<br>2） MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集</p><p>这里避免了手动获取结果集就很nice，不像jdbc中那么繁琐。</p><p>3） MyBatis可以使用简单的XML或注解用于配置和原始映射，将接口和Java的POJO（Plain Old Java Objects，普通的Java对象）映射成数据库中的记录<br>4） MyBatis 是一个 半自动的ORM（Object Relation Mapping）框架</p><h3 id="1-3-mybatis下载"><a href="#1-3-mybatis下载" class="headerlink" title="1.3 mybatis下载"></a>1.3 mybatis下载</h3><p>下载地址：<a href="https://github.com/mybatis/mybatis-3">https://github.com/mybatis/mybatis-3</a></p><p><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/mybatis.assets/image-20220719175444012.png" alt="image-20220719175444012"></p><p><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/mybatis.assets/image-20220719175844065.png" alt="image-20220719175844065"></p><h3 id="1-4和其他持久层技术对比"><a href="#1-4和其他持久层技术对比" class="headerlink" title="1.4和其他持久层技术对比"></a>1.4和其他持久层技术对比</h3><ul><li>JDBC<ul><li>SQL 夹杂在Java代码中耦合度高，导致硬编码内伤</li><li>维护不易且实际开发需求中 SQL 有变化，频繁修改的情况多见</li><li>代码冗长，开发效率低</li></ul></li><li>Hibernate 和 JPA<ul><li>操作简便，开发效率高</li><li>程序中的长难复杂 SQL 需要绕过框架</li><li>内部自动生产的 SQL，不容易做特殊优化</li><li>基于全映射的全自动框架，大量字段的 POJO 进行部分映射时比较困难。</li><li>反射操作太多，导致数据库性能下降</li></ul></li><li>MyBatis<ul><li>轻量级，性能出色</li><li>SQL 和 Java 编码分开，功能边界清晰。Java代码专注业务、SQL语句专注数据</li><li>开发效率稍逊于HIbernate，但是完全能够接受</li></ul></li></ul><h2 id="2、搭建MyBatis"><a href="#2、搭建MyBatis" class="headerlink" title="2、搭建MyBatis"></a>2、搭建MyBatis</h2><h3 id="2-1-环境配置和工程"><a href="#2-1-环境配置和工程" class="headerlink" title="2.1 环境配置和工程"></a>2.1 环境配置和工程</h3><h4 id="所需要的maven依赖"><a href="#所需要的maven依赖" class="headerlink" title="所需要的maven依赖"></a>所需要的maven依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Mybatis核心 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- junit测试 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- MySQL驱动 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- log4j日志 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="核心配置文件"><a href="#核心配置文件" class="headerlink" title="核心配置文件"></a>核心配置文件</h4><p>习惯上命名为mybatis-config.xml，这个文件名仅仅只是建议，并非强制要求。将来整合Spring<br>之后，这个配置文件可以省略，所以大家操作时可以直接复制、粘贴。<br>核心配置文件主要用于配置连接数据库的环境以及MyBatis的全局配置信息<br>核心配置文件存放的位置是src/main/resources目录下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta"><span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta"><span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-comment">&lt;!--设置连接数据库的环境--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/ssm?</span></span><br><span class="hljs-string"><span class="hljs-tag">serverTimezone=UTC&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><span class="hljs-comment">&lt;!--引入映射文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mappers/UserMapper.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-2-创建mapper接口"><a href="#2-2-创建mapper接口" class="headerlink" title="2.2 创建mapper接口"></a>2.2 创建mapper接口</h3><p>MyBatis中的mapper接口相当于以前的dao。但是区别在于，mapper仅仅是接口，我们不需要提供实现类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br>    <span class="hljs-comment">//增</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">insertUser</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3-创建MyBatis的映射文件"><a href="#2-3-创建MyBatis的映射文件" class="headerlink" title="2.3 创建MyBatis的映射文件"></a>2.3 创建MyBatis的映射文件</h3><h4 id="对象关系映射的概念"><a href="#对象关系映射的概念" class="headerlink" title="对象关系映射的概念"></a>对象关系映射的概念</h4><p>相关概念：ORM（Object Relationship Mapping）对象关系映射。</p><ul><li>对象：Java的实体类对象</li><li>关系：关系型数据库</li><li>映射：二者之间的对应关系</li></ul><div class="table-container"><table><thead><tr><th>Java概念</th><th>数据库概念</th></tr></thead><tbody><tr><td>类</td><td>表</td></tr><tr><td>属性</td><td>字段/列</td></tr><tr><td>对象</td><td>记录/行</td></tr></tbody></table></div><h3 id="2-4-映射文件"><a href="#2-4-映射文件" class="headerlink" title="2.4 映射文件"></a>2.4 映射文件</h3><h4 id="命名和位置"><a href="#命名和位置" class="headerlink" title="命名和位置"></a>命名和位置</h4><ul><li>表所对应的实体类的类名+Mapper.xml<br>例如：表t_user，映射的实体类为User，所对应的映射文件为UserMapper.xml<br>因此一个映射文件对应一个实体类，对应一张表的操作</li><li>MyBatis映射文件用于编写SQL，访问以及操作表中的数据<br>MyBatis映射文件存放的位置是src/main/resources/mappers目录下</li></ul><h4 id="两个一致"><a href="#两个一致" class="headerlink" title="两个一致"></a>两个一致</h4><p>mapper接口和映射文件要保证两个一致：</p><ol><li>mapper接口的全类名和映射文件的namespace一致</li><li>mapper接口的方法的方法名要和映射文件中的SQL中的id保持一致。这样，每次调用接口，都会根据接口找到对应的映射文件， 然后根据调用接口的方法，定位到具体的SQL语句</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.zylai.mybatis.mapper.UserMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--void updateUser()--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertUser&quot;</span>&gt;</span><br>        insert into t_user values(null,&#x27;admin&#x27;,&#x27;123456&#x27;,23,&#x27;男&#x27;,&#x27;123@qq.com&#x27;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-5-执行流程和原理"><a href="#2-5-执行流程和原理" class="headerlink" title="2.5 执行流程和原理"></a>2.5 执行流程和原理</h3><h4 id="2-4-1-执行流程"><a href="#2-4-1-执行流程" class="headerlink" title="2.4.1 执行流程"></a>2.4.1 执行流程</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsert</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//1.获取核心配置文件的输入流</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>);<br>        <span class="hljs-comment">//2.获取SqlSessionFactoryBuilder对象</span><br>        <span class="hljs-type">SqlSessionFactoryBuilder</span> <span class="hljs-variable">sqlSessionFactoryBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>();<br>        <span class="hljs-comment">//3.获取SqlSessionFactory对象，根据核心配置文件的输入流</span><br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> sqlSessionFactoryBuilder.build(is);<br>        <span class="hljs-comment">//4.获取sql的会话对象SqlSession，是MyBatis提供的操作数据库的对象</span><br>        <span class="hljs-comment">//7.调用有参的方法，设置自动提交事务。空参方法默认不自动提交</span><br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//5.获取UserMapper的代理实现类对象，底层使用代理模式实现</span><br>        <span class="hljs-comment">//通过代理对象实现接口的方法，当调用接口的方法时，</span><br>        <span class="hljs-comment">// 其实执行了SqlSession的具体方法，然后其会根据接口的全类名及方法名</span><br>        <span class="hljs-comment">//定位到映射文件对应的SQL，如下面说的一样</span><br>        <span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>        <span class="hljs-comment">//6.调用mapper接口中的方法，实现添加用户信息的功能</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> mapper.insertUser();<br>        System.out.println(<span class="hljs-string">&quot;结果&quot;</span>+res);<br><br>        <span class="hljs-comment">//注意：这里使用Mapper接口的代理对象其实是最终的一种方法，通过代理对象重写接口的方法</span><br>        <span class="hljs-comment">//本质上，就是调用了接口的方法，实现类中使用SqlSession的方法</span><br>        <span class="hljs-comment">// 提供sql的唯一标识找到SQL并执行，唯一标识是namespace.sqlId。</span><br>        <span class="hljs-comment">// 这里就不需要用到接口了，接口的名称和方法只是作为唯一id，完全可以换成其他的。</span><br><span class="hljs-comment">//        int res1 = sqlSession.insert(&quot;com.zylai.mybatis.mapper.UserMapper.insertUser&quot;);</span><br><span class="hljs-comment">//        System.out.println(&quot;结果：&quot;+res1);</span><br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        总结：</span><br><span class="hljs-comment">        1.创建mapper接口的代理对象</span><br><span class="hljs-comment">        2.代理对象重写了mapper接口中的方法</span><br><span class="hljs-comment">        3.执行SqlSession的方法，参数是sql的唯一标识</span><br><span class="hljs-comment">        4.返回结果</span><br><span class="hljs-comment">         */</span><br><br><br>        <span class="hljs-comment">//7.提交事务，使用空参的SqlSession，需要自己进行事务的控制</span><br>        <span class="hljs-comment">//sqlSession.commit();</span><br>        <span class="hljs-comment">//8.关闭会话</span><br>        sqlSession.close();<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="2-4-2-原理"><a href="#2-4-2-原理" class="headerlink" title="2.4.2 原理"></a>2.4.2 原理</h4><p>通过Mapper接口的代理对象其实是执行这个SQL的最终方法，其本质上就是代理对象实现了接口中的方法，会实际执行SqlSession的具体方法，比如：<code>sqlSession.insert(&quot;com.zylai.mybatis.mapper.UserMapper.insertUser&quot;);</code>。此类方法根据SQL的唯一标识找到SQL并执行，唯一标识是namespace.sqlId，<strong>即mapper方法对应的全类名加上方法名。</strong>因此，他会去获取当前方法的全类名和方法名作为参数传入上述方法中。</p><p>因此如果不使用mapper接口的代理对象，采用如下的方式，其本质上是完全一样的<br>这里就不需要用到接口了，接口的名称和方法只是作为唯一id，完全可以换成其他的。</p><p> 总结：<br>:one: 创建mapper接口的代理对象</p><p>:two: 代理对象重写了mapper接口中的方法</p><p>:three: 执行SqlSession的方法，参数是sql的唯一标识</p><p><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/mybatis.assets/image-20220720153211574.png" alt="image-20220720153211574"></p><p>:four: 返回结果</p><h3 id="2-5-增删改查"><a href="#2-5-增删改查" class="headerlink" title="2.5 增删改查"></a>2.5 增删改查</h3><p>mapper接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br>    <span class="hljs-comment">//增</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">insertUser</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">//改</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateUser</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">//删</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteUser</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">//根据id查</span><br>    User <span class="hljs-title function_">getUserById</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">//查询所有的用户信息</span><br>    List&lt;User&gt; <span class="hljs-title function_">getAllUser</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>映射文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--void updateUser()--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertUser&quot;</span>&gt;</span><br>        insert into t_user values(null,&#x27;admin&#x27;,&#x27;123456&#x27;,23,&#x27;男&#x27;,&#x27;123@qq.com&#x27;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--void updateUser()--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateUser&quot;</span>&gt;</span><br>        update t_user set username=&#x27;root&#x27;,password=&#x27;123&#x27; where id=3<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--void deleteUser();--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteUser&quot;</span>&gt;</span><br>        delete from t_user where id = 3<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--    User getUserById();--&gt;</span><br><span class="hljs-comment">&lt;!--    需要指定返回值类型，</span><br><span class="hljs-comment">        resultType：设置结果类型，即查询的数据要转为的java类型</span><br><span class="hljs-comment">        resultMap：自定义映射，处理一对一或一对多的映射关系--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.zylai.mybatis.pojo.User&quot;</span>&gt;</span><br>        select * from t_user where id = 1<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--    List&lt;User&gt; getAllUser();--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getAllUser&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>        select * from t_user<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3-mybatis核心配置"><a href="#3-mybatis核心配置" class="headerlink" title="3 mybatis核心配置"></a>3 mybatis核心配置</h2><h3 id="3-1-配置顺序"><a href="#3-1-配置顺序" class="headerlink" title="3.1 配置顺序"></a>3.1 配置顺序</h3><p>MyBatis核心配置文件中的标签必须要按照指定的顺序配置：<br>(properties?,settings?,typeAliases?,typeHandlers?,objectFactory?,<br>objectWrapperFactory?,reflectorFactory?,plugins?,environments?,<br>databaseIdProvider?,mappers?)</p><h3 id="3-2-properties标签"><a href="#3-2-properties标签" class="headerlink" title="3.2 properties标签"></a>3.2 properties标签</h3><p>引入properties文件，此后就可以在当前文件中使用${key}的方式来访问value</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--引入properties文件，此后就可以在当前文件中使用$&#123;key&#125;的方式来访问value--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;jdbc.properties&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-3-typeAliases标签"><a href="#3-3-typeAliases标签" class="headerlink" title="3.3 typeAliases标签"></a>3.3 typeAliases标签</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    typeAliases：设置类型别名，为某个具体的类型设置一个别名</span><br><span class="hljs-comment">    在Mybatis的范围中，就可以使用别名表示一个具体的类型</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        type：设置需要起别名的类型</span><br><span class="hljs-comment">        alias：设置某个类型的别名</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;typeAlias type=&quot;com.zylai.mybatis.pojo.User&quot; alias=&quot;abc&quot;/&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!--如果不设置alias属性，那么默认的别名就是类名且不区分大小写--&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;typeAlias type=&quot;com.zylai.mybatis.pojo.User&quot;/&gt;--&gt;</span><br><br>    <span class="hljs-comment">&lt;!--通过包来设置类型别名，指定包下所有的类型将全部拥有默认的别名，即类名且不区分大小写--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.zylai.mybatis.pojo&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-4-environment标签"><a href="#3-4-environment标签" class="headerlink" title="3.4 environment标签"></a>3.4 environment标签</h3><p><code>environoments</code>    <code>environment</code>    <code>transactionManager</code>    <code>dataSource</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    配置连接数据库的环境--&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        environments：配置连接数据库的环境</span><br><span class="hljs-comment">        属性：</span><br><span class="hljs-comment">            default：指定默认使用的环境，比如选择开发和测试</span><br><span class="hljs-comment">--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--        environment：设置一个具体的连接数据库的环境</span><br><span class="hljs-comment">            属性：</span><br><span class="hljs-comment">            id：设置环境的唯一标识，不能重复</span><br><span class="hljs-comment">--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">               transactionManager：设置事务管理器</span><br><span class="hljs-comment">               属性：</span><br><span class="hljs-comment">               type：设置事务管理的方式。JDBC或MANAGED</span><br><span class="hljs-comment">               JDBC：表示使用JDBC中原生的事务管理方式</span><br><span class="hljs-comment">               MANAGED： 被管理，例如Spring</span><br><span class="hljs-comment">            --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            dataSource：设置数据源</span><br><span class="hljs-comment">            属性：</span><br><span class="hljs-comment">             type：设置数据源的类型；</span><br><span class="hljs-comment">             值：POOLED，UNPOOLED，JNDI</span><br><span class="hljs-comment">             POOLED：表示使用数据库连接池</span><br><span class="hljs-comment">             UNPOOLED：不使用数据库连接池，每一次获取连接时都重新创建连接</span><br><span class="hljs-comment">             JNDI：（了解）表示使用上下文中的数据源</span><br><span class="hljs-comment">            --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--注意，这里是mysql8.0的配置，如果是mysql5，就是com.mysql.jdbc.Driver--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--注意，这里是mysql8.0的配置，如果是mysql5，就是com.mysql.jdbc.Driver--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-5-mappers"><a href="#3-5-mappers" class="headerlink" title="3.5 mappers"></a>3.5 mappers</h3><p>使用package起别名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    引入mybatis的映射文件，映射文件中是操作数据库的SQL语句，需要通过</span><br><span class="hljs-comment">当前的核心配置文件引入映射文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;mapper resource=&quot;mappers/UserMapper.xml&quot;/&gt;--&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        相当于typeAliases给mapper起别名</span><br><span class="hljs-comment">            以包的方式引入映射文件，但是必须满足两个条件：</span><br><span class="hljs-comment">             1.mapper接口和映射文件所在的包必须一致</span><br><span class="hljs-comment">             2.mapper接口的名字和映射文件的名字必须一致</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">             这样一来mapper映射文件和mapper接口的类加载之后会在同一个目录下</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.zylai.mybatis.mapper&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-6-配置之后的目录结构"><a href="#3-6-配置之后的目录结构" class="headerlink" title="3.6 配置之后的目录结构"></a>3.6 配置之后的目录结构</h3><p><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/mybatis.assets/image-20220721114209772.png" alt="image-20220721114209772"></p><h2 id="4-MyBatis获取参数"><a href="#4-MyBatis获取参数" class="headerlink" title="4 MyBatis获取参数"></a>4 MyBatis获取参数</h2><h3 id="4-1-获取参数的两种方式-和"><a href="#4-1-获取参数的两种方式-和" class="headerlink" title="4.1 获取参数的两种方式#{}和${}"></a>4.1 获取参数的两种方式<code>#&#123;&#125;</code>和<code>$&#123;&#125;</code></h3><p><code>#&#123;&#125;</code>：会自动加上一对单引号，使用较多</p><p><code>$&#123;&#125;</code>：不会加上单引号，需要我们手动在SQL中为参数加上单引号，所以一般使用较少，不过在一些特殊的查询里会用到</p><h3 id="4-2-mapper方法的参数为单个的字面量类型"><a href="#4-2-mapper方法的参数为单个的字面量类型" class="headerlink" title="4.2 mapper方法的参数为单个的字面量类型"></a>4.2 mapper方法的参数为单个的字面量类型</h3><h3 id="4-3-mapper方法的参数为多个的字面量类型"><a href="#4-3-mapper方法的参数为多个的字面量类型" class="headerlink" title="4.3 mapper方法的参数为多个的字面量类型"></a>4.3 mapper方法的参数为多个的字面量类型</h3><h3 id="4-4-mapper方法的参数为一个map集合类型的参数"><a href="#4-4-mapper方法的参数为一个map集合类型的参数" class="headerlink" title="4.4 mapper方法的参数为一个map集合类型的参数"></a>4.4 mapper方法的参数为一个map集合类型的参数</h3><h3 id="4-5-mapper方法的参数为实体类类型"><a href="#4-5-mapper方法的参数为实体类类型" class="headerlink" title="4.5 mapper方法的参数为实体类类型"></a>4.5 mapper方法的参数为实体类类型</h3><h3 id="4-6-在mapper接口方法的参数上设置-param注解"><a href="#4-6-在mapper接口方法的参数上设置-param注解" class="headerlink" title="4.6 在mapper接口方法的参数上设置@param注解"></a>4.6 在mapper接口方法的参数上设置@param注解</h3><p>总的看这里就好，上面的标题是为了生成思维导图。</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-comment">* Mybatis获取参数值的两种方式：#&#123;&#125; $&#123;&#125;</span><br><span class="hljs-comment">* #&#123;&#125;的本质是占位符赋值，$&#123;&#125;的本质是字符串拼接</span><br><span class="hljs-comment">* 1、若mapper接口方法的参数为单个的字面量类型</span><br><span class="hljs-comment">* 此时#&#123;&#125;和$&#123;&#125;以任意内容获取参数值（不过一般使用参数名），一定注意$&#123;&#125;的单引号问题</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* 2、若mapper接口方法的参数为多个的字面量类型</span><br><span class="hljs-comment">* 此时mybatis会将参数放在map集合中，以两种方式存储数据</span><br><span class="hljs-comment">*  1）以arg0,arg1...为键，以参数为值</span><br><span class="hljs-comment">*  2）以param1,param2,...为键，以参数为值</span><br><span class="hljs-comment">* 因此，只需要通过#&#123;&#125;访问map的键来获取map的值。也可$&#123;&#125;，注意单引号</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* 下面省略说明$&#123;&#125;,都可以用$&#123;&#125;实现，且注意加单引号</span><br><span class="hljs-comment">* 3、若mapper接口方法的参数为一个map集合类型的参数</span><br><span class="hljs-comment">* 只需要通过#&#123;&#125;访问map集合的键来获取map的值。</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* 4、若mapper接口方法的参数为实体类类型的参数</span><br><span class="hljs-comment">* 只需要通过#&#123;&#125;访问实体类中的属性名，就可以获取响应的属性值</span><br><span class="hljs-comment">*什么是属性：是get方法去掉‘get’之后的字符串，首字母小写的名称。</span><br><span class="hljs-comment">* 因为有时候没有声明成员变量，但是可以在get，set方法中去访问到对应的属性的</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* 5、可以在mapper接口方法的参数上设置@param注解</span><br><span class="hljs-comment">* 此时Mybatis会将这些参数放在map中，以两种方式进行存储</span><br><span class="hljs-comment">*  1）以@Param注解的value属性值为键，以参数为值</span><br><span class="hljs-comment">*  2）以param1，param2...为键，以参数为值</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">*  真正使用的就是两种情况：</span><br><span class="hljs-comment">*  1.使用注解（包括了情况1,2,3,5  这些情况下建议都用注解）</span><br><span class="hljs-comment">*  2.使用实体类对象，直接通过实体类属性获取值就可</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.zylai.mybatis.mapper.UserMapper&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--    User getUserByUsername(String username);--&gt;</span><br>    <span class="hljs-comment">&lt;!--方法参数为单个的字面量类型，#是占位符方式，里面的内容可以随便写。$是字符串拼接，需要手动加单引号--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserByUsername&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>        select * from t_user where username=#&#123;username&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--    User checkLogin(String username,String password);--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkLogin&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>        select * from t_user where username=#&#123;param1&#125; and password = #&#123;param2&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--    User checkLoginByMap(Map&lt;String,Object&gt; map);--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkLoginByMap&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span> &gt;</span><br>        select * from t_user where username=#&#123;username&#125; and password = #&#123;password&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--    void insertUser(User user);--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertUser&quot;</span>&gt;</span><br>        insert into t_user values(null,#&#123;username&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;gender&#125;,#&#123;email&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--    User checkLoginByParam(@Param(&quot;username&quot;) String username, @Param(&quot;password&quot;) String password);--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkLoginByParam&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>        select * from t_user where username=#&#123;username&#125; and password = #&#123;password&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-7-总结"><a href="#4-7-总结" class="headerlink" title="4.7 总结"></a>4.7 总结</h3><p>真正使用的就是两种情况：</p><p>1.使用注解（包括了情况1,2,3,5  这些情况下建议都用注解）</p><p>2.使用实体类对象，直接通过实体类属性获取值就可</p><h2 id="5、查询"><a href="#5、查询" class="headerlink" title="5、查询"></a>5、查询</h2><h3 id="5-1-查询一个实体类对象"><a href="#5-1-查询一个实体类对象" class="headerlink" title="5.1 查询一个实体类对象"></a>5.1 查询一个实体类对象</h3><p>如果返回值只有一条，底层调用的是selectOne方法。如果返回多条，就会报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 若sql语句查询的结果为多条时，一定不能以实体类类型作为方法的返回值</span><br><span class="hljs-comment">     * 否则会抛出异常TooManyResultsException，因为底层调用sqlSession.selectOne方法</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">//根据id查询用户信息</span><br>    User <span class="hljs-title function_">getUserById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> Integer id)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    User getUserById(@Param(&quot;id&quot;) Integer id);--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>        select * from t_user where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-2-查询一个集合"><a href="#5-2-查询一个集合" class="headerlink" title="5.2 查询一个集合"></a>5.2 查询一个集合</h3><p>在xml文件中返回值类型选择集合对应的泛型即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//查询所有的用户信息</span><br>List&lt;User&gt; <span class="hljs-title function_">getAllUser</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    List&lt;User&gt; getAllUser();--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getAllUser&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>        select * from t_user<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-3-查询为单个数据"><a href="#5-3-查询为单个数据" class="headerlink" title="5.3 查询为单个数据"></a>5.3 查询为单个数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//查询用户的总数量</span><br>Integer <span class="hljs-title function_">getCount</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    Integer getCount();--&gt;</span><br><span class="hljs-comment">&lt;!--    这里可以直接使用Integer或int，且不区分大小写，不用写全类名</span><br><span class="hljs-comment">        MyBatis中为java中常用的类型设置了类型别名</span><br><span class="hljs-comment">        Integer：integer,int</span><br><span class="hljs-comment">        int: _int</span><br><span class="hljs-comment">        Map: map</span><br><span class="hljs-comment">        String: string</span><br><span class="hljs-comment">--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getCount&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Integer&quot;</span>&gt;</span><br>        select count(*) from t_user<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="mybatis中常用类型别名"><a href="#mybatis中常用类型别名" class="headerlink" title="mybatis中常用类型别名"></a>mybatis中常用类型别名</h4><p><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/mybatis.assets/image-20220721145354407.png" alt="image-20220721145354407"></p><p><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/mybatis.assets/image-20220721145426401.png" alt="image-20220721145426401"></p><h3 id="5-4-查询一条数据为map集合"><a href="#5-4-查询一条数据为map集合" class="headerlink" title="5.4 查询一条数据为map集合"></a>5.4 查询一条数据为map集合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//根据id查询用户信息为map集合</span><br>Map&lt;String,Object&gt; <span class="hljs-title function_">getUserByIdToMap</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> Integer id)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    Map&lt;String,Object&gt; getUserByIdToMap(@Param(&quot;id&quot;) Integer id);--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserByIdToMap&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>        select * from t_user where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-5-查询多条数据map集合"><a href="#5-5-查询多条数据map集合" class="headerlink" title="5.5 查询多条数据map集合"></a>5.5 查询多条数据map集合</h3><p>两种方案</p><h4 id="5-5-1-List封装多条map"><a href="#5-5-1-List封装多条map" class="headerlink" title="5.5.1 List封装多条map"></a>5.5.1 List封装多条map</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">*  将mapper接口方法的返回值设置为泛型时map的list集合<br>* List&lt;Map&lt;String,Object&gt;&gt;<br>* 最终的结果：<br>*&#123;password=<span class="hljs-number">123456</span>, gender=男, id=<span class="hljs-number">1</span>, age=<span class="hljs-number">23</span>, email=<span class="hljs-number">123</span><span class="hljs-meta">@qq</span>.com, username=admin1&#125;<br>* &#123;password=<span class="hljs-number">123456</span>, gender=男, id=<span class="hljs-number">2</span>, age=<span class="hljs-number">23</span>, email=<span class="hljs-number">123</span><span class="hljs-meta">@qq</span>.com, username=admin&#125;<br>* &#123;password=<span class="hljs-number">123456</span>, gender=男, id=<span class="hljs-number">4</span>, age=<span class="hljs-number">23</span>, email=<span class="hljs-number">123</span><span class="hljs-meta">@qq</span>.com, username=admin&#125;<br>* &#123;password=<span class="hljs-number">123</span>, gender=女, id=<span class="hljs-number">5</span>, age=<span class="hljs-number">33</span>, email=<span class="hljs-number">3232</span>@<span class="hljs-number">163.</span>com, username=xiaoming&#125;<br>* &#123;password=<span class="hljs-number">123</span>, gender=女, id=<span class="hljs-number">7</span>, age=<span class="hljs-number">33</span>, email=<span class="hljs-number">3232</span>@<span class="hljs-number">163.</span>com, username=xiaoming&#125;<br>* &#123;password=<span class="hljs-number">123</span>, id=<span class="hljs-number">8</span>, username=jack&#125;<br>* &#123;id=<span class="hljs-number">9</span>&#125;<br>*<br><br>    <span class="hljs-comment">//查询所有的用户信息为map集合，这里需要使用list集合去存储map</span><br>    List&lt;Map&lt;String,Object&gt;&gt; <span class="hljs-title function_">getAllUserToMapList</span><span class="hljs-params">()</span>;<br><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    List&lt;Map&lt;String,Object&gt;&gt; getAllUserToMapList();--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getAllUserToMapList&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>        select * from t_user<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="5-5-2-大的map封装多条map"><a href="#5-5-2-大的map封装多条map" class="headerlink" title="5.5.2 大的map封装多条map"></a>5.5.2 大的map封装多条map</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">* <span class="hljs-number">2.</span>将每条数据转换的map集合放在一个大的map集合中，但是必须通过<span class="hljs-meta">@MapKey</span>注解<br>* 将查询的某个字段的值作为大的map的键<br>*  <span class="hljs-meta">@MapKey(&quot;id&quot;)</span><br>*  Map&lt;String, Object&gt;<br>* 结果：<br>* &#123;<br>* <span class="hljs-number">1</span>=&#123;password=<span class="hljs-number">123456</span>, gender=男, id=<span class="hljs-number">1</span>, age=<span class="hljs-number">23</span>, email=<span class="hljs-number">123</span><span class="hljs-meta">@qq</span>.com, username=admin1&#125;,<br>* <span class="hljs-number">2</span>=&#123;password=<span class="hljs-number">123456</span>, gender=男, id=<span class="hljs-number">2</span>, age=<span class="hljs-number">23</span>, email=<span class="hljs-number">123</span><span class="hljs-meta">@qq</span>.com, username=admin&#125;,<br>* <span class="hljs-number">4</span>=&#123;password=<span class="hljs-number">123456</span>, gender=男, id=<span class="hljs-number">4</span>, age=<span class="hljs-number">23</span>, email=<span class="hljs-number">123</span><span class="hljs-meta">@qq</span>.com, username=admin&#125;,<br>* <span class="hljs-number">5</span>=&#123;password=<span class="hljs-number">123</span>, gender=女, id=<span class="hljs-number">5</span>, age=<span class="hljs-number">33</span>, email=<span class="hljs-number">3232</span>@<span class="hljs-number">163.</span>com, username=xiaoming&#125;,<br>* <span class="hljs-number">7</span>=&#123;password=<span class="hljs-number">123</span>, gender=女, id=<span class="hljs-number">7</span>, age=<span class="hljs-number">33</span>, email=<span class="hljs-number">3232</span>@<span class="hljs-number">163.</span>com, username=xiaoming&#125;,<br>* <span class="hljs-number">8</span>=&#123;password=<span class="hljs-number">123</span>, id=<span class="hljs-number">8</span>, username=jack&#125;,<br>* <span class="hljs-number">9</span>=&#123;id=<span class="hljs-number">9</span>&#125;<br>* &#125;<br><br>    <span class="hljs-comment">//将查询出来的值放到map中，再把这些map放到一个大的map中，这个大的map的键通过注解指定为id</span><br>    <span class="hljs-meta">@MapKey(&quot;id&quot;)</span><br>    Map&lt;String,Object&gt; <span class="hljs-title function_">getAllUserToMap</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--@MapKey(&quot;id&quot;)--&gt;</span><br><span class="hljs-comment">&lt;!--Map&lt;String,Object&gt; getAllUserToMap();--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getAllUserToMap&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>    select * from t_user<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="6、特殊SQL的执行"><a href="#6、特殊SQL的执行" class="headerlink" title="6、特殊SQL的执行"></a>6、特殊SQL的执行</h2><h3 id="6-1-模糊查询"><a href="#6-1-模糊查询" class="headerlink" title="6.1 模糊查询"></a>6.1 模糊查询</h3><h1 id="会自动加上一个单引号，-不会。包括6-2-6-3"><a href="#会自动加上一个单引号，-不会。包括6-2-6-3" class="headerlink" title="{}会自动加上一个单引号，${}不会。包括6.2,6.3"></a>{}会自动加上一个单引号，${}不会。包括6.2,6.3</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//模糊查询用户名</span><br>List&lt;User&gt; <span class="hljs-title function_">getUserByLike</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;keyword&quot;)</span> String keyword)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--List&lt;User&gt; getUserByLike(@Param(&quot;keyword&quot;) String keyword);--&gt;</span><br><span class="hljs-comment">&lt;!--在单引号中占位符会被解析为字符串--&gt;</span><br><br><span class="hljs-comment">&lt;!--select * from t_user where username like &#x27;%$&#123;keyword&#125;%&#x27;--&gt;</span><br><span class="hljs-comment">&lt;!--select * from t_user where username like concat(&#x27;%&#x27;,#&#123;keyword&#125;,&#x27;%&#x27;)--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserByLike&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>    select * from t_user where username like &quot;%&quot;#&#123;keyword&#125;&quot;%&quot;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="6-2-批量删除"><a href="#6-2-批量删除" class="headerlink" title="6.2 批量删除"></a>6.2 批量删除</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//批量删除</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteMoreUser</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;ids&quot;)</span> String ids)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--void deleteMoreUser(@Param(&quot;ids&quot;) String ids);--&gt;</span><br><span class="hljs-comment">&lt;!--这里只能使用$&#123;&#125;，因为使用#&#123;&#125;会自动加上一个单引号出现错误。</span><br><span class="hljs-comment">    所以使用$&#123;&#125;不会自动加上单引号，不使用占位符赋值--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteMoreUser&quot;</span>&gt;</span><br>    delete from t_user where id in($&#123;ids&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="6-3-动态设置表名"><a href="#6-3-动态设置表名" class="headerlink" title="6.3 动态设置表名"></a>6.3 动态设置表名</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//动态设置表名，查询用户信息</span><br>List&lt;User&gt; <span class="hljs-title function_">getUserList</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;tableName&quot;)</span> String tableName)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--List&lt;User&gt; getUserList(@Param(&quot;tableName&quot;) String tableName);--&gt;</span><br><span class="hljs-comment">&lt;!--同上，这里也不能用#&#123;&#125;，因为表名不能使用单引号--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserList&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>    select * from $&#123;tableName&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="6-4-添加用户信息获取主键"><a href="#6-4-添加用户信息获取主键" class="headerlink" title="6.4 添加用户信息获取主键"></a>6.4 添加用户信息获取主键</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//添加用户信息并获取主键</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">insertUser</span><span class="hljs-params">(User user)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--void insertUser(User user);--&gt;</span><br><span class="hljs-comment">&lt;!--不能把主键值作为返回值是因为增删改的返回值固定为影响行数</span><br><span class="hljs-comment">    所以把获取的主键放到传入对象User的指定属性keyProperty中</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    useGeneratedKeys:表示添加功能使用了自增的主键</span><br><span class="hljs-comment">    keyProperty：指定将主键值赋值给实体类的参数</span><br><span class="hljs-comment">    --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertUser&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><br>    insert into t_user values(null,#&#123;username&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;gender&#125;,#&#123;email&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="7-自定义映射resultMap"><a href="#7-自定义映射resultMap" class="headerlink" title="7 自定义映射resultMap"></a>7 自定义映射resultMap</h2><h3 id="7-1-处理字段和属性的映射关系"><a href="#7-1-处理字段和属性的映射关系" class="headerlink" title="7.1 处理字段和属性的映射关系"></a>7.1 处理字段和属性的映射关系</h3><h4 id="三种方式"><a href="#三种方式" class="headerlink" title="三种方式"></a>三种方式</h4><p>对于字段名和属性名不一致的情况，如何处理映射关系</p><ol><li>为查询的字段设置别名，和属性名保持一致 （一般不用）</li><li>当字段符合mysql的要求使用_,而属性符合java要求使用驼峰<br>此时可以在mybatis的核心配置文件中设置一个全局配置，<br>可以自动将下划线映射为驼峰<br>emp_id:empId,emp_name:empName</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--设置将下划线映射为驼峰--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><ol><li>使用resultMap自定义处理映射</li></ol><h4 id="resultMap"><a href="#resultMap" class="headerlink" title="resultMap"></a>resultMap</h4><p>resultMap：自定义的映射关系<br>id：唯一标识<br>type：处理映射关系的实体类的类型<br>使用了resultMap就需要把每个映射关系都写出来</p><p>   常用的标签：<br>   id：处理主键和实体类中属性的映射关系<br>   result：处理普通字段和实体类中属性的映射关系<br>   association：处理多对一的映射关系（处理实体类类型的属性）<br>   column：设置映射关系中的字段名，必须是SQL查询出的某个字段<br>   property：设置映射关系中的属性的属性名，必须是处理的实体类类型中的属性名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//测试处理字段和属性名不一致情况下的映射关系</span><br>Emp <span class="hljs-title function_">getEmpByEmpId</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;empId&quot;)</span> Integer empId)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Emp getEmpByEmpId(@Param(&quot;empId&quot;) Integer empId);--&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    处理字段名和属性名不一致的情况，如何处理映射关系</span><br><span class="hljs-comment">    1、为查询的字段设置别名，和属性名保持一致 （一般不用）</span><br><span class="hljs-comment">    2、当字段符合mysql的要求使用_,而属性符合java要求使用驼峰</span><br><span class="hljs-comment">    此时可以在mybatis的核心配置文件中设置一个全局配置，</span><br><span class="hljs-comment">    可以自动将下划线映射为驼峰</span><br><span class="hljs-comment">    emp_id:empId,emp_name:empName</span><br><span class="hljs-comment">    3、使用resultMap自定义处理映射</span><br><span class="hljs-comment"> --&gt;</span><br><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    resultMap：自定义的映射关系</span><br><span class="hljs-comment">    id：唯一标识</span><br><span class="hljs-comment">    type：处理映射关系的实体类的类型</span><br><span class="hljs-comment">    使用了resultMap就需要把每个映射关系都写出来</span><br><span class="hljs-comment">   常用的标签：</span><br><span class="hljs-comment">   id：处理主键和实体类中属性的映射关系</span><br><span class="hljs-comment">   result：处理普通字段和实体类中属性的映射关系</span><br><span class="hljs-comment">   association：处理多对一的映射关系（处理实体类类型的属性）</span><br><span class="hljs-comment">   column：设置映射关系中的字段名，必须是SQL查询出的某个字段</span><br><span class="hljs-comment">   property：设置映射关系中的属性的属性名，必须是处理的实体类类型中的属性名</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empId&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empName&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;gender&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByEmpId&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;empResultMap&quot;</span>&gt;</span><br>    select * from t_emp where emp_id = #&#123;empId&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByEmpIdOld&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>    select * from t_emp where emp_id = #&#123;empId&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="7-2-多对一映射处理"><a href="#7-2-多对一映射处理" class="headerlink" title="7.2 多对一映射处理"></a>7.2 多对一映射处理</h3><p>一个部门对应着多个员工，要查询完整的员工信息，就需要根据数据库中员工所在部门的部门id查询到对应的部门信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Emp</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer empId;<br><br>    <span class="hljs-keyword">private</span> String empName;<br><br>    <span class="hljs-keyword">private</span> String age;<br><br>    <span class="hljs-keyword">private</span> String gender;<br><br>    <span class="hljs-keyword">private</span> Dept dept;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//连表查询员工和对应的部门的信息</span><br>Emp <span class="hljs-title function_">getEmpAndDeptByEmpId</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;empId&quot;)</span> Integer empId)</span>;<br></code></pre></td></tr></table></figure><p>使用左外连接查询的结果：</p><p><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/mybatis.assets/image-20220722082244480.png" alt="image-20220722082244480"></p><p>如何将这个结果封装到Emp实体类中呢</p><h4 id="7-2-1-级联查询"><a href="#7-2-1-级联查询" class="headerlink" title="7.2.1 级联查询"></a>7.2.1 级联查询</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empAndDeptResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empId&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empName&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;gender&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept.deptId&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept.deptName&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--Emp getEmpAndDeptByEmpId(@Param(&quot;empId&quot;) Integer empId);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpAndDeptByEmpId&quot;</span>             <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;empAndDeptResultMap&quot;</span>&gt;</span><br>        select *<br>        from t_emp<br>        left join t_dept on t_emp.dept_id = t_dept.dept_id<br>        where emp_id = #&#123;empId&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="7-2-2-association"><a href="#7-2-2-association" class="headerlink" title="7.2.2 association"></a>7.2.2 association</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empAndDeptResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empId&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empName&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;gender&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        association：处理实体类类型的属性</span><br><span class="hljs-comment">        property：设置需要处理映射关系的属性的属性名</span><br><span class="hljs-comment">        JavaType：表示要处理属性的类型，使用别名</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;Dept&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deptId&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deptName&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-comment">&lt;!--Emp getEmpAndDeptByEmpId(@Param(&quot;empId&quot;) Integer empId);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpAndDeptByEmpId&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;empAndDeptResultMap&quot;</span>&gt;</span><br>    select *<br>    from t_emp<br>    left join t_dept on t_emp.dept_id = t_dept.dept_id<br>    where emp_id = #&#123;empId&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="7-2-3-分步查询"><a href="#7-2-3-分步查询" class="headerlink" title="7.2.3 分步查询"></a>7.2.3 分步查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//通过分步查询获取员工和部门的信息第一步</span><br>Emp <span class="hljs-title function_">getEmpAndDeptByStepOne</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;empId&quot;)</span> Integer empId)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//通过分步查询获取员工和部门的信息第二步，查询部门信息</span><br>Dept <span class="hljs-title function_">getEmpAndDeptByStepTwo</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;deptId&quot;)</span>Integer deptId)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empAndDeptByStepResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empId&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empName&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;gender&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        fetchType：在开启延迟加载的环境中，指定当前的sql是延迟加载还是立即加载</span><br><span class="hljs-comment">                   eager表示立即加载，lazy表示懒加载</span><br><span class="hljs-comment">        property：设置需要处理映射关系的属性的属性名</span><br><span class="hljs-comment">        select：设置分步查询的SQL的唯一标识</span><br><span class="hljs-comment">        column：将查询出来的某个字段作为分布查询的SQL条件</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">fetchType</span>=<span class="hljs-string">&quot;eager&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;com.zylai.mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_id&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--Emp getEmpAndDeptByStepOne(@Param(&quot;empId&quot;) Integer empId);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpAndDeptByStepOne&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;empAndDeptByStepResultMap&quot;</span>&gt;</span><br>    select * from t_emp where emp_id = #&#123;empId&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="7-3-延迟加载"><a href="#7-3-延迟加载" class="headerlink" title="7.3 延迟加载"></a>7.3 延迟加载</h3><p>在核心配置文件中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--开启延迟加载</span><br><span class="hljs-comment">    对于分步查询，关联的对象将会延迟加载。</span><br><span class="hljs-comment">    比如获取emp信息，如果只是打印emp.getEmpName()，用不到Dept的信息</span><br><span class="hljs-comment">    那么查询Dept的第二步将不会执行。</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lazyLoadingEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--value为false时按需加载--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;aggressiveLazyLoading&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>开启之后还可以在mapper映射文件特定sql中的association标签的fetchType属性选择是立即加载还是延迟加载</p><h3 id="7-4-一对多映射处理"><a href="#7-4-一对多映射处理" class="headerlink" title="7.4 一对多映射处理"></a>7.4 一对多映射处理</h3><h4 id="7-4-1-collection"><a href="#7-4-1-collection" class="headerlink" title="7.4.1 collection"></a>7.4.1 collection</h4><p>collection标签表示一端中的集合，标签的ofType属性指定集合中的类型</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deptAndEmpResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Dept&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deptId&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deptName&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--ofType指定集合中的类型--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empList&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empId&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empName&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;gender&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-comment">&lt;!--Dept getDeptAndEmpByDeptId(@Param(&quot;deptId&quot;)Integer deptId);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getDeptAndEmpByDeptId&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;deptAndEmpResultMap&quot;</span>&gt;</span><br>    SELECT * FROM t_dept LEFT JOIN t_emp ON t_dept.dept_id = t_emp.dept_id<br>    WHERE t_dept.dept_id = #&#123;deptId&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="7-4-2-分步查询"><a href="#7-4-2-分步查询" class="headerlink" title="7.4.2 分步查询"></a>7.4.2 分步查询</h4><p>这个已经说过了，同上即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--分步查询--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deptAndEmpByStepMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Dept&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deptId&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deptName&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empList&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;com.zylai.mybatis.mapper.EmpMapper.getDeptAndEmpByStepTwo&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_id&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-comment">&lt;!--Dept getDeptAndEmpByStepOne(@Param(&quot;deptId&quot;)Integer deptId);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getDeptAndEmpByStepOne&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;deptAndEmpByStepMap&quot;</span>&gt;</span><br>    select * from t_dept where dept_id = #&#123;deptId&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--查部门信息，分步的第二步--&gt;</span><br><span class="hljs-comment">&lt;!--List&lt;Emp&gt; getDeptAndEmpByStepTwo(@Param(&quot;deptId&quot;) Integer deptId);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getDeptAndEmpByStepTwo&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>    select * from t_emp where dept_id = #&#123;deptId&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="8-动态SQL"><a href="#8-动态SQL" class="headerlink" title="8 动态SQL"></a>8 动态SQL</h2><p>对于客户端传过来的条件，如果没有内容，那么就是null或者空字符串””</p><h3 id="8-1-if"><a href="#8-1-if" class="headerlink" title="8.1 if"></a>8.1 if</h3><p>通过test属性中的表达式判断标签中的内容是否有效（是否会拼接到SQL中）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    1、if标签</span><br><span class="hljs-comment">    需要在where后面紧接着跟上一个恒成立的条件（也可以直接写true），</span><br><span class="hljs-comment">    然后在每个拼接的条件前面加上and</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByConditionOld&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>    select * from t_emp where 1=1<br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span><br>        and emp_name = #&#123;empName&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span><br>        and age = #&#123;age&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;gender != null and gender != &#x27;&#x27;&quot;</span>&gt;</span><br>        and gender = #&#123;gender&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="8-2-where"><a href="#8-2-where" class="headerlink" title="8.2 where"></a>8.2 where</h3><p>1、若where标签中有条件成立，会自动生成一个where关键字进行拼接</p><p>2、会自动将where标签中<strong>内容前多余的and去掉</strong>,但是不会加and，所以在第一个if之后的语句都要加and。也不会将内容后的and去掉</p><p>3、如果没有任何一个条件成立，则where没有任何功能，即不会生成where关键字</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByConditionTwo&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>    select * from t_emp<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span><br>             emp_name = #&#123;empName&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span><br>            and age = #&#123;age&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;gender != null and gender != &#x27;&#x27;&quot;</span>&gt;</span><br>            and gender = #&#123;gender&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="8-3-trim"><a href="#8-3-trim" class="headerlink" title="8.3 trim"></a>8.3 trim</h3><p>prefix，suffix：在整个标签内容前面或后面添加指定的内容<br>prefixOverrides,suffixOverrides:在标签中内容前面或后面添加指定的内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--List&lt;Emp&gt; getEmpByCondition(Emp emp);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByCondition&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>    select * from t_emp<br>    <span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;where&quot;</span> <span class="hljs-attr">suffixOverrides</span>=<span class="hljs-string">&quot;and&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span><br>            emp_name = #&#123;empName&#125; and<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span><br>             age = #&#123;age&#125; and<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;gender != null and gender != &#x27;&#x27;&quot;</span>&gt;</span><br>             gender = #&#123;gender&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="8-4-choose、when、otherwise"><a href="#8-4-choose、when、otherwise" class="headerlink" title="8.4 choose、when、otherwise"></a>8.4 choose、when、otherwise</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xml">例如<br>choose: when()&#123;&#125;<br>        when()&#123;&#125;<br>        when()&#123;&#125;<br>        otherwise()&#123;&#125;<br>相当于java中的if()&#123;&#125;<br>             else if()&#123;&#125;<br>             else if()&#123;&#125;<br>             else&#123;&#125;<br>when至少设置一个，otherwise做多设置一个<br>即只要一个条件满足，后面的条件就不会再判断了<br><br><span class="hljs-comment">&lt;!--List&lt;Emp&gt; getEmpByChoose(Emp emp);--&gt;</span><br>    <span class="hljs-comment">&lt;!--when中有一个条件满足就不会去拼接了--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByChoose&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>        select * from t_emp<br>        <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">choose</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span><br>                    emp_name=#&#123;empName&#125;<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span><br>                    age=#&#123;age&#125;<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;gender != null and gender != &#x27;&#x27;&quot;</span>&gt;</span><br>                    gender=#&#123;gender&#125;<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">choose</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="8-5-foreach"><a href="#8-5-foreach" class="headerlink" title="8.5 foreach"></a>8.5 foreach</h3><ol><li>collection：设置要循环的数组或集合</li><li>item：用一个字符串表示数组或集合中的每一个数据</li><li>separator：设置每次循环的数据之间的分隔符</li><li>open：循环体之前以什么开始</li><li>close：循环体之后以什么结束</li></ol><p>遍历集合和数组</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--foreach标签--&gt;</span><br><span class="hljs-comment">&lt;!--void insertBatchEmp(List&lt;Emp&gt; empList);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertBatchEmp&quot;</span>&gt;</span><br>    insert into t_emp values<br>    <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;empList&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;emp&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>        (null,#&#123;emp.empName&#125;,#&#123;emp.age&#125;,#&#123;emp.gender&#125;,null)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--void deleteBatchEmp(@Param(&quot;empIds&quot;) Integer[] empIds);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteBatchEmpOne&quot;</span>&gt;</span><br>    delete from t_emp where emp_id in<br>    <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;empIds&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;empId&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span>&gt;</span><br>        #&#123;empId&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--void deleteBatchEmp(@Param(&quot;empIds&quot;) Integer[] empIds);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteBatchEmp&quot;</span>&gt;</span><br>    delete from t_emp where<br>    <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;empIds&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;empId&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;or&quot;</span>&gt;</span><br>        emp_id = #&#123;empId&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="8-6-sql片段"><a href="#8-6-sql片段" class="headerlink" title="8.6 sql片段"></a>8.6 sql片段</h3><p>可以记录一段sql，在需要用的地方使用include标签进行引用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empColumns&quot;</span>&gt;</span><br>    emp_id,emp_name,age,gender,dept_id<br><span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;empColumns&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h2 id="9-MyBatis的缓存"><a href="#9-MyBatis的缓存" class="headerlink" title="9 MyBatis的缓存"></a>9 MyBatis的缓存</h2><h3 id="9-1-MyBatis一级缓存"><a href="#9-1-MyBatis一级缓存" class="headerlink" title="9.1 MyBatis一级缓存"></a>9.1 MyBatis一级缓存</h3><h4 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h4><ul><li><p>一级缓存是<strong>SqlSession级别的</strong>，即通过同一个SqlSession查询的数据会被缓存，再次使用同一个SqlSession查询同一条数据，会从缓存中获取。</p></li><li><p>一级缓存是默认开启的，一般我们不会去关闭它。</p></li></ul><h4 id="失效的四种情况"><a href="#失效的四种情况" class="headerlink" title="失效的四种情况"></a>失效的四种情况</h4><ul><li>不同的SqlSession对应不同的一级缓存</li><li>同一个SqlSession但是查询条件不同</li><li>同一个SqlSession两次查询期间执行了任何一次增删改操作</li><li>同一个SqlSession两次查询期间手动清空了缓存</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetEmpById</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession1</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>        <span class="hljs-type">CacheMapper</span> <span class="hljs-variable">mapper1</span> <span class="hljs-operator">=</span> sqlSession1.getMapper(CacheMapper.class);<br>        <span class="hljs-type">Emp</span> <span class="hljs-variable">emp1</span> <span class="hljs-operator">=</span> mapper1.getEmpById(<span class="hljs-number">2</span>);<br>        System.out.println(emp1);<br>        <span class="hljs-comment">//两次查询期间执行了增加操作，任何的增删改都会使缓存失效</span><br>        <span class="hljs-comment">//mapper1.insertEmp(new Emp(null,&quot;小红&quot;,18,&quot;男&quot;));</span><br><br>        <span class="hljs-comment">//两次查询期间，手动清空了缓存</span><br><span class="hljs-comment">//        sqlSession1.clearCache();</span><br>        <span class="hljs-type">Emp</span> <span class="hljs-variable">emp2</span> <span class="hljs-operator">=</span> mapper1.getEmpById(<span class="hljs-number">2</span>);<br>        System.out.println(emp2);<br><br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession2</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>        <span class="hljs-type">CacheMapper</span> <span class="hljs-variable">mapper2</span> <span class="hljs-operator">=</span> sqlSession2.getMapper(CacheMapper.class);<br>        <span class="hljs-type">Emp</span> <span class="hljs-variable">emp3</span> <span class="hljs-operator">=</span> mapper2.getEmpById(<span class="hljs-number">2</span>);<br>        System.out.println(emp3);<br>    &#125;<br></code></pre></td></tr></table></figure><p>只查询了一次</p><p><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/mybatis.assets/image-20220722225411457.png" alt="image-20220722225411457"></p><h3 id="9-2-MyBatis二级缓存"><a href="#9-2-MyBatis二级缓存" class="headerlink" title="9.2  MyBatis二级缓存"></a>9.2  MyBatis二级缓存</h3><h4 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h4><ul><li>二级缓存是SqlSessionFactory级别的，即通过同一个SqlSessionFactory获取的SqlSession对象</li><li>查询的数据会被缓存，再通过同一个SqlSessionFactory获取的SqlSession查询相同的数据会从缓存中获取</li></ul><h4 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h4><ul><li>在核心配置文件中，设置全局配置属性cacheEnabled=”true”，默认为true，不需要设置</li><li>在映射文件中设置标签<code>&lt;cache/&gt;</code></li><li>二级缓存必须在SqlSession关闭或提交之后有效</li><li>查询的数据所转换的实体类类型必须实现序列化的接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCache</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//获取SqlSessionFactory</span><br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>);<br>    <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(is);<br>    <span class="hljs-comment">//获取第一个SqlSession</span><br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession1</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>    <span class="hljs-type">CacheMapper</span> <span class="hljs-variable">mapper1</span> <span class="hljs-operator">=</span> sqlSession1.getMapper(CacheMapper.class);<br>    <span class="hljs-type">Emp</span> <span class="hljs-variable">emp1</span> <span class="hljs-operator">=</span> mapper1.getEmpById(<span class="hljs-number">2</span>);<br>    System.out.println(emp1);<br>    sqlSession1.close();<br><br>    <span class="hljs-comment">//获取第一个SqlSession</span><br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession2</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>    <span class="hljs-type">CacheMapper</span> <span class="hljs-variable">mapper2</span> <span class="hljs-operator">=</span> sqlSession2.getMapper(CacheMapper.class);<br>    <span class="hljs-type">Emp</span> <span class="hljs-variable">emp2</span> <span class="hljs-operator">=</span> mapper2.getEmpById(<span class="hljs-number">2</span>);<br>    System.out.println(emp2);<br>    sqlSession2.close();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/mybatis.assets/image-20220722175039373.png" alt="image-20220722175039373"></p><p>使二级缓存失效的情况：</p><p>两次查询之间执行了任意的增删改，会使一级和二级缓存同时失效</p><h2 id="10-MyBatis逆向工程"><a href="#10-MyBatis逆向工程" class="headerlink" title="10 MyBatis逆向工程"></a>10 MyBatis逆向工程</h2><p>正向工程：先创建Java实体类，由框架负责根据实体类生成数据库表。 Hibernate是支持正向工<br>程的。<br>逆向工程：先创建数据库表，由框架负责根据数据库表，反向生成如下资源：<br>Java实体类<br>Mapper接口<br>Mapper映射文件</p><h3 id="10-1-步骤"><a href="#10-1-步骤" class="headerlink" title="10.1 步骤"></a>10.1 步骤</h3><h4 id="1-添加依赖和插件"><a href="#1-添加依赖和插件" class="headerlink" title="1 添加依赖和插件"></a>1 添加依赖和插件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Mybatis核心 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- junit测试 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- MySQL驱动 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- log4j日志 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 控制Maven在构建过程中相关配置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 构建过程中用到的插件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 具体插件，逆向工程的操作是以构建过程中插件形式出现的 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 插件的依赖 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 逆向工程的核心依赖 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- MySQL驱动 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-创建逆向工程的核心文件"><a href="#2-创建逆向工程的核心文件" class="headerlink" title="2 创建逆向工程的核心文件"></a>2 创建逆向工程的核心文件</h4><p>文件名必须是：<code>generatorConfig.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">generatorConfiguration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">generatorConfiguration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    targetRuntime: 执行生成的逆向工程的版本</span><br><span class="hljs-comment">    MyBatis3Simple: 生成基本的CRUD（清新简洁版）</span><br><span class="hljs-comment">    MyBatis3: 生成带条件的CRUD（奢华尊享版）</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;DB2Tables&quot;</span> <span class="hljs-attr">targetRuntime</span>=<span class="hljs-string">&quot;MyBatis3&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 数据库的连接信息 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jdbcConnection</span> <span class="hljs-attr">driverClass</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">connectionURL</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">userId</span>=<span class="hljs-string">&quot;root&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">jdbcConnection</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- javaBean的生成策略--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaModelGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.zylai.mybatis.pojo&quot;</span></span><br><span class="hljs-tag">                            <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;.\src\main\java&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--是否使用子包--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>            <span class="hljs-comment">&lt;!--去掉字段的前后空格--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;trimStrings&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaModelGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- SQL映射文件的生成策略 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">sqlMapGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.zylai.mybatis.mapper&quot;</span></span><br><span class="hljs-tag">                         <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;.\src\main\resources&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">sqlMapGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- Mapper接口的生成策略 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaClientGenerator</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;XMLMAPPER&quot;</span></span><br><span class="hljs-tag">                             <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.zylai.mybatis.mapper&quot;</span> <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;.\src\main\java&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaClientGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 逆向分析的表 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- tableName设置为*号，可以对应所有表，此时不写domainObjectName --&gt;</span><br>        <span class="hljs-comment">&lt;!-- domainObjectName属性指定生成出来的实体类的类名 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;t_emp&quot;</span> <span class="hljs-attr">domainObjectName</span>=<span class="hljs-string">&quot;Emp&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;t_dept&quot;</span> <span class="hljs-attr">domainObjectName</span>=<span class="hljs-string">&quot;Dept&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">generatorConfiguration</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-使用maven工程的插件执行"><a href="#3-使用maven工程的插件执行" class="headerlink" title="3 使用maven工程的插件执行"></a>3 使用maven工程的插件执行</h4><p><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/mybatis.assets/image-20220723120850650.png" alt="image-20220723120850650"></p><p>执行结果：</p><p><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/mybatis.assets/image-20220723120928458.png" alt="image-20220723120928458"></p><p>之后使用具体的方法即可</p><p>注意：生成尊享版本中有根据条件进行插入和更新等。他们是选择性添加或更新，如果指定的字段没有赋值，那么就不会给数据库中的字段赋值为null，而是由数据库的表采用对应的列的默认值</p><h2 id="11-分页插件"><a href="#11-分页插件" class="headerlink" title="11 分页插件"></a>11 分页插件</h2><h3 id="11-1-分页功能"><a href="#11-1-分页功能" class="headerlink" title="11.1 分页功能"></a>11.1 分页功能</h3><p>分页是一个很常用的功能，这就不再赘述，简单的写一下参数</p><p>limit index,pageSize<br>pageSize：每页显示的条数<br>pageNum：当前页的页码<br>index：当前页的起始索引，index=(pageNum-1)*pageSize<br>count：总记录数<br>totalPage：总页数</p><p>方式一：totalPage = (count+pageSize-1)/pageSize</p><p>方式二：totalPage = count / pageSize;<br>if(count % pageSize != 0){<br>totalPage += 1;<br>}</p><p>pageSize=4，pageNum=1，index=0 limit 0,4<br>pageSize=4，pageNum=3，index=8 limit 8,4<br>pageSize=4，pageNum=6，index=20 limit 20,4</p><p><a>首页</a>     <a>上一页</a>  2 3 4 5 6  <a>下一页</a>    <a>尾页</a></p><h3 id="11-2-分页插件的使用步骤"><a href="#11-2-分页插件的使用步骤" class="headerlink" title="11.2 分页插件的使用步骤"></a>11.2 分页插件的使用步骤</h3><h4 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1 添加依赖"></a>1 添加依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    分页插件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-配置分页插件"><a href="#2-配置分页插件" class="headerlink" title="2 配置分页插件"></a>2 配置分页插件</h4><p>在MyBatis的核心配置文件中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--设置分页插件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span> <span class="hljs-attr">interceptor</span>=<span class="hljs-string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="11-3-分页插件的使用"><a href="#11-3-分页插件的使用" class="headerlink" title="11.3 分页插件的使用"></a>11.3 分页插件的使用</h3><p>a&gt;在查询功能之前使用PageHelper.startPage(int pageNum, int pageSize)开启分页功能<br>pageNum：当前页的页码<br>pageSize：每页显示的条数<br>b&gt;在查询获取list集合之后，使用PageInfo<T> pageInfo = new PageInfo&lt;&gt;(List<T> list, int<br>navigatePages)获取分页相关数据<br>list：分页之后的数据<br>navigatePages：导航分页的页码数<br>c&gt;分页相关数据<br>PageInfo{<br>pageNum=8, pageSize=4, size=2, startRow=29, endRow=30, total=30, pages=8,<br>list=Page{count=true, pageNum=8, pageSize=4, startRow=28, endRow=32, total=30,<br>pages=8, reasonable=false, pageSizeZero=false},<br>prePage=7, nextPage=0, isFirstPage=false, isLastPage=true, hasPreviousPage=true,<br>hasNextPage=false, navigatePages=5, navigateFirstPage4, navigateLastPage8,<br>navigatepageNums=[4, 5, 6, 7, 8]<br>}<br>pageNum：当前页的页码<br>pageSize：每页显示的条数<br>size：当前页显示的真实条数<br>total：总记录数<br>pages：总页数<br>prePage：上一页的页码<br>nextPage：下一页的页码<br>isFirstPage/isLastPage：是否为第一页/最后一页<br>hasPreviousPage/hasNextPage：是否存在上一页/下一页<br>navigatePages：导航分页的页码数<br>navigatepageNums：导航分页的页码，[1,2,3,4,5]</p>]]></content>
    
    
    <categories>
      
      <category>SSM框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>框架 MyBatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jdbc学习笔记</title>
    <link href="/posts/4bf3ee607b9f/"/>
    <url>/posts/4bf3ee607b9f/</url>
    
    <content type="html"><![CDATA[<h2 id="1-简介和基础使用"><a href="#1-简介和基础使用" class="headerlink" title="1 简介和基础使用"></a>1 简介和基础使用</h2><h3 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h3><p>JDBC：是sun发布的一个java程序和数据库之间通信的规范（接口）</p><p>各大数据库厂商去实现JDBC规范（实现类），将这些实现类打成压缩包，就是所谓的jar包</p><p>比如：</p><p><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/image-20220621124839866.png" alt="image-20220621124839866"></p><h3 id="1-2-创建连接"><a href="#1-2-创建连接" class="headerlink" title="1.2 创建连接"></a>1.2 创建连接</h3><p>url：防止中文乱码，加上参数<code>useUnicode=true&amp;characterEncoding=utf-8</code>。url的标准格式为：<code>jdbc:mysql://ip:端口号/数据库名称?参数列表</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, SQLException &#123;<br><span class="hljs-comment">//        1.添加jar包</span><br><span class="hljs-comment">//        2.加载驱动</span><br>       Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br><span class="hljs-comment">//       3.通过驱动管理器获取连接对象</span><br><span class="hljs-comment">//        3-1 准备url</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/fruitdb&quot;</span>;<br><span class="hljs-comment">//        3-2 准备用户名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">usr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br><span class="hljs-comment">//        3-3 准备密码</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">pwd</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url,usr,pwd);<br>        System.out.println(<span class="hljs-string">&quot;conn = &quot;</span>+connection);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-3-添加数据"><a href="#1-3-添加数据" class="headerlink" title="1.3 添加数据"></a>1.3 添加数据</h3><p>先建立连接之后，得到connection对象，这个对象相当于建立了一条连接数据库和java之间的马路，通过connection对象得到预处理对象<code>PreparedStatement</code>，这个对象相当于马路上的一辆车，用于运送真实的数据。</p><p>在SQL语句中，使用<code>?</code>当做占位符，再通过预处理对象的set方法为占位符填充内容</p><p>最后，记得关闭连接，先关闭预处理对象，再关闭连接对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, SQLException &#123;<br><span class="hljs-comment">//        1.加载驱动</span><br>        Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>        <span class="hljs-comment">//       2.通过驱动管理器获取连接对象</span><br><span class="hljs-comment">//        2-1 准备url</span><br><span class="hljs-comment">//        url表示和数据库通信的地址，如果需要带参数，则需要使用？进行连接</span><br><span class="hljs-comment">//        如果使用多个参数,多个参数之间使用&amp;连接</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/fruitdb?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8&quot;</span>;<br><span class="hljs-comment">//        2-2 准备用户名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">usr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br><span class="hljs-comment">//        2-3 准备密码</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">pwd</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>        <br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url,usr,pwd);<br><br><span class="hljs-comment">//        3. 编写SQL语句</span><br><span class="hljs-comment">//        id，fname,price,fcount,remark</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into t_fruit value(0,?,?,?,?)&quot;</span>;<br><br><span class="hljs-comment">//        4.创建预处理对象</span><br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">psmt</span> <span class="hljs-operator">=</span> connection.prepareStatement(sql);<br><span class="hljs-comment">//        5.填充参数</span><br>        psmt.setString(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;榴莲&quot;</span>);<br>        psmt.setInt(<span class="hljs-number">2</span>,<span class="hljs-number">15</span>);<br>        psmt.setInt(<span class="hljs-number">3</span>,<span class="hljs-number">100</span>);<br>        psmt.setString(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;榴莲是一种神奇的水果&quot;</span>);<br><span class="hljs-comment">//        6.执行更新（增删改），返回影响行数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> psmt.executeUpdate();<br>        System.out.println(i&gt;<span class="hljs-number">0</span>?<span class="hljs-string">&quot;添加成功！&quot;</span>:<span class="hljs-string">&quot;添加失败&quot;</span>);<br><span class="hljs-comment">//        7.释放资源</span><br>        psmt.close();<br>        connection.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-4-更新和删除数据"><a href="#1-4-更新和删除数据" class="headerlink" title="1.4 更新和删除数据"></a>1.4 更新和删除数据</h3><p>和添加数据步骤都一样，最后都是预处理对象调用<code>executeUpdate</code>方法并返回影响行数。因此更新与修改和添加的不同就是SQL语句和预处理设置SQL中的占位符的值而已。</p><p>更新：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Fruit</span> <span class="hljs-variable">fruit</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fruit</span>(<span class="hljs-number">33</span>, <span class="hljs-string">&quot;猕猴桃&quot;</span>, <span class="hljs-string">&quot;猕猴桃啊猕猴桃&quot;</span>);<br><br>       Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>       <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/fruitdb?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8&quot;</span>;<br>       <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>);<br><br>       <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update t_fruit set fname=?,remark = ? where fid = ?&quot;</span>;<br>       <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">psmt</span> <span class="hljs-operator">=</span> connection.prepareStatement(sql);<br>       psmt.setString(<span class="hljs-number">1</span>, fruit.getFname());<br>       psmt.setString(<span class="hljs-number">2</span>, fruit.getRemark());<br>       psmt.setInt(<span class="hljs-number">3</span>,fruit.getFid());<br>       <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> psmt.executeUpdate();<br>       System.out.println(i&gt;<span class="hljs-number">0</span>?<span class="hljs-string">&quot;修改成功&quot;</span>:<span class="hljs-string">&quot;修改失败&quot;</span>);<br><br>       psmt.close();<br>       connection.close();<br></code></pre></td></tr></table></figure><p>删除：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>      <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/fruitdb?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8&quot;</span>;<br>      <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>);<br><br>      <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;delete from t_fruit where fid = ?&quot;</span>;<br>      <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">psmt</span> <span class="hljs-operator">=</span> connection.prepareStatement(sql);<br>      psmt.setInt(<span class="hljs-number">1</span>,<span class="hljs-number">33</span>);<br><br>      <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> psmt.executeUpdate();<br>      System.out.println(i&gt;<span class="hljs-number">0</span>?<span class="hljs-string">&quot;删除成功&quot;</span>:<span class="hljs-string">&quot;删除失败&quot;</span>);<br><br>      psmt.close();<br>      connection.close();<br></code></pre></td></tr></table></figure><h3 id="1-5-增删更新总结"><a href="#1-5-增删更新总结" class="headerlink" title="1.5 增删更新总结"></a>1.5 增删更新总结</h3><h4 id="1-5-1-步骤："><a href="#1-5-1-步骤：" class="headerlink" title="1.5.1 步骤："></a>1.5.1 步骤：</h4><ol><li>加载驱动</li><li>通过驱动获取连接对象<code>Connection</code>，连接对象相当于连接java与数据库之间的一条马路</li><li>编写SQL语句，语句中使用占位符</li><li>创建数据预处理对象<code>PreparedStatement</code>，数据预处理对象相当于马路上运送SQL语句的小车</li><li>填充预处理数据对象的参数</li><li>执行更新参数，对于增删查都是执行<code>PreparedStatement</code>对象的<code>executeUpdate</code>方法，返回影响行数</li><li>关闭资源，关闭<code>PreparedStatement</code>对象和<code>Connection</code>对象</li></ol><h3 id="1-6-查询"><a href="#1-6-查询" class="headerlink" title="1.6 查询"></a>1.6 查询</h3><p>查询与增删改的不同之处在于：</p><ul><li>预处理对象执行的是<code>executeQuery</code>方法</li><li>方法返回结果集<code>ResultSet</code>，可以遍历结果接进行数据的操作</li></ul><p>例如：查询所有数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        1.加载驱动</span><br>        Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/fruitdb?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8&quot;</span>;<br><span class="hljs-comment">//        2.获取连接对象</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>);<br><br><span class="hljs-comment">//        3.编写SQL语句</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from t_fruit&quot;</span>;<br><span class="hljs-comment">//        4.创建预处理命令对象</span><br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">psmt</span> <span class="hljs-operator">=</span> connection.prepareStatement(sql);<br><span class="hljs-comment">//        5.填充参数，这里没有，略</span><br><span class="hljs-comment">//        6.执行查询，返回结果集</span><br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> psmt.executeQuery();<br>        List&lt;Fruit&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-comment">//        7.处理结果集</span><br><span class="hljs-comment">//        判断下一行是否有数据，并且指针指到下一行</span><br>        <span class="hljs-keyword">while</span>(res.next())&#123;<br><span class="hljs-comment">//            表示当前行第一列的数据，因为这一列是int类型的数据，所以使用getInt</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">fid</span> <span class="hljs-operator">=</span> res.getInt(<span class="hljs-number">1</span>);<br><span class="hljs-comment">//            也可以通过结果集的列名</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">fname</span> <span class="hljs-operator">=</span> res.getString(<span class="hljs-string">&quot;fname&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> res.getInt(<span class="hljs-number">3</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">fcount</span> <span class="hljs-operator">=</span> res.getInt(<span class="hljs-string">&quot;fcount&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">remark</span> <span class="hljs-operator">=</span> res.getString(<span class="hljs-string">&quot;remark&quot;</span>);<br><br>            <span class="hljs-type">Fruit</span> <span class="hljs-variable">fruit</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fruit</span>(fid,fname,price,fcount,remark);<br>            list.add(fruit);<br>        &#125;<br><span class="hljs-comment">//        8.释放资源</span><br>        res.close();<br>        psmt.close();<br>        connection.close();<br>        <span class="hljs-keyword">for</span> (Fruit fruit : list) &#123;<br>            System.out.println(fruit);<br>        &#125;<br></code></pre></td></tr></table></figure><p>查询指定的一条记录：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java">Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/fruitdb?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8&quot;</span>;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>);<br><br><span class="hljs-comment">//        编写SQL语句</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from t_fruit where fid = ?&quot;</span>;<br><span class="hljs-comment">//        创建预处理命令对象</span><br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">psmt</span> <span class="hljs-operator">=</span> connection.prepareStatement(sql);<br><span class="hljs-comment">//        填充参数</span><br>        psmt.setInt(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br><span class="hljs-comment">//        由于fid是主键，所以可以不使用列表，这里改一下</span><br><span class="hljs-comment">//        执行查询，返回结果集</span><br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> psmt.executeQuery();<br><span class="hljs-comment">//        判断下一行是否有数据，并且指针指到下一行</span><br>        <span class="hljs-keyword">if</span>(res.next())&#123;<br><span class="hljs-comment">//            表示当前行第一列的数据，因为这一列是int类型的数据，所以使用getInt</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">fid</span> <span class="hljs-operator">=</span> res.getInt(<span class="hljs-number">1</span>);<br><span class="hljs-comment">//            也可以通过结果集的列名</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">fname</span> <span class="hljs-operator">=</span> res.getString(<span class="hljs-string">&quot;fname&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> res.getInt(<span class="hljs-number">3</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">fcount</span> <span class="hljs-operator">=</span> res.getInt(<span class="hljs-string">&quot;fcount&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">remark</span> <span class="hljs-operator">=</span> res.getString(<span class="hljs-string">&quot;remark&quot;</span>);<br>            <span class="hljs-type">Fruit</span> <span class="hljs-variable">fruit</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fruit</span>(fid,fname,price,fcount,remark);<br>            System.out.println(fruit);<br>        &#125;<br><span class="hljs-comment">//        释放资源</span><br>        res.close();<br>        psmt.close();<br>        connection.close();<br></code></pre></td></tr></table></figure><p>查询总记录条数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">        Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/fruitdb?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8&quot;</span>;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>);<br><br><span class="hljs-comment">//        编写SQL语句</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select count(*) from t_fruit&quot;</span>;<br><span class="hljs-comment">//        创建预处理命令对象</span><br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">psmt</span> <span class="hljs-operator">=</span> connection.prepareStatement(sql);<br><span class="hljs-comment">//        执行查询，返回结果集</span><br><span class="hljs-comment">//        这里返回的是一个一行一列的数据</span><br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> psmt.executeQuery();<br><span class="hljs-comment">//        判断下一行是否有数据，并且指针指到下一行</span><br>        <span class="hljs-keyword">if</span>(res.next())&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> res.getInt(<span class="hljs-number">1</span>);<br>            System.out.println(<span class="hljs-string">&quot;总记录条数：&quot;</span>+count);<br>        &#125;<br><span class="hljs-comment">//        释放资源</span><br>        res.close();<br>        psmt.close();<br>        connection.close();<br></code></pre></td></tr></table></figure><h3 id="1-7-查询总结"><a href="#1-7-查询总结" class="headerlink" title="1.7 查询总结"></a>1.7 查询总结</h3><h4 id="1-7-1-查询与增删改的不同之处在于："><a href="#1-7-1-查询与增删改的不同之处在于：" class="headerlink" title="1.7.1 查询与增删改的不同之处在于："></a>1.7.1 查询与增删改的不同之处在于：</h4><ul><li>预处理对象执行的是<code>executeQuery</code>方法</li><li>方法返回结果集<code>ResultSet</code>，可以遍历结果接进行数据的操作</li></ul><h4 id="1-7-2-步骤："><a href="#1-7-2-步骤：" class="headerlink" title="1.7.2 步骤："></a>1.7.2 步骤：</h4><ol><li>加载驱动</li><li>通过驱动获取连接对象<code>Connection</code>，连接对象相当于连接java与数据库之间的一条马路</li><li>编写SQL语句，语句中使用占位符</li><li>创建数据预处理对象<code>PreparedStatement</code>，数据预处理对象相当于马路上运送SQL语句的小车</li><li>填充预处理数据对象的参数</li><li>执行更新参数，执行<code>executeQuery</code>方法</li><li>返回结果集<code>ResultSet</code></li><li>关闭资源，关闭<code>ResultSet</code>对象、<code>PreparedStatement</code>对象和<code>Connection</code>对象</li></ol><h3 id="1-8-批处理"><a href="#1-8-批处理" class="headerlink" title="1.8 批处理"></a>1.8 批处理</h3><p>如果一次性添加大量数据，若每一条数据都单独执行一次方法，那么效率很低下，所以可以采用批处理的方法来提高处理的效率。</p><p>批处理操作的步骤：</p><ol><li>如果执行批处理任务，需要在添加一个参数： rewriteBatchedStatements=true</li><li>将数据加入一个批次：psmt.addBatch();</li><li>执行批处理：int[] batch = psmt.executeBatch();如果继续进行处理，需要进行clear：psmt.clear();</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zylai.jdbc01;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Zhao YunLai</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2022/06/21/12:54</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: 添加</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoAddBatch</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, SQLException &#123;<br><span class="hljs-comment">//        1.加载驱动</span><br>        Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>        <span class="hljs-comment">//       2.通过驱动管理器获取连接对象</span><br><span class="hljs-comment">//        批处理操作一</span><br><span class="hljs-comment">//        如果执行批处理任务，需要添加一个参数： rewriteBatchedStatements=true</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/fruitdb?rewriteBatchedStatements=true&amp;useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8&quot;</span>;<br><span class="hljs-comment">//        2-2 准备用户名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">usr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br><span class="hljs-comment">//        2-3 准备密码</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">pwd</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url,usr,pwd);<br><span class="hljs-comment">//        3. 编写SQL语句</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into t_fruit value(0,?,?,?,?)&quot;</span>;<br><br><span class="hljs-comment">//        4.创建预处理对象</span><br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">psmt</span> <span class="hljs-operator">=</span> connection.prepareStatement(sql);<br><span class="hljs-comment">//        5.填充参数</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>            psmt.setString(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;榴莲&quot;</span>+i);<br>            psmt.setInt(<span class="hljs-number">2</span>,<span class="hljs-number">15</span>);<br>            psmt.setInt(<span class="hljs-number">3</span>,<span class="hljs-number">100</span>);<br>            psmt.setString(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;榴莲是一种神奇的水果&quot;</span>+i);<br><br><span class="hljs-comment">//            批处理操作二：将数据加入一个批次</span><br>            psmt.addBatch();<br><span class="hljs-comment">//            每一百个处理一次，分批次处理，每次执行完要记得清空一下队列</span><br>            <span class="hljs-keyword">if</span>(i%<span class="hljs-number">100</span>==<span class="hljs-number">0</span>)&#123;<br>                psmt.executeBatch();<br><span class="hljs-comment">//                记得clear一下</span><br>                psmt.clearBatch();<br>            &#125;<br>        &#125;<br><span class="hljs-comment">//        批处理操作三</span><br>        <span class="hljs-type">int</span>[] batch = psmt.executeBatch();<br>        System.out.println(Arrays.toString(batch));<br><br><span class="hljs-comment">//        7.释放资源</span><br>        psmt.close();<br>        connection.close();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="2-工程"><a href="#2-工程" class="headerlink" title="2 工程"></a>2 工程</h2><h3 id="2-1-需求概述和整体框架"><a href="#2-1-需求概述和整体框架" class="headerlink" title="2.1 需求概述和整体框架"></a>2.1 需求概述和整体框架</h3><p>以实现一个水果库存系统为例，这个系统需要提供水果的增删改查操作</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span>欢迎使用水果库存系统<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br><span class="hljs-number">1</span>.查看水果库存列表<br><span class="hljs-number">2</span>.添加水果库存信息<br><span class="hljs-number">3</span>.查看特定水果库存信息<br><span class="hljs-number">4</span>.水果下架<br><span class="hljs-number">5</span>.退出<br><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br><br></code></pre></td></tr></table></figure><p>整体框架如下图，在controller里面写调用DAO层的方法，在dao里面写持久层方法，提供接口及其实现类，pojo写实体类，view是客户端视图操作。</p><p><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/image-20220621232711636.png" alt="image-20220621232711636"></p><h3 id="2-2-最初版本"><a href="#2-2-最初版本" class="headerlink" title="2.2 最初版本"></a>2.2 最初版本</h3><h4 id="2-2-1-pojo"><a href="#2-2-1-pojo" class="headerlink" title="2.2.1 pojo"></a>2.2.1 pojo</h4><p>pojo包下的Fruit类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zylai.fruit01.pojo;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Zhao YunLai</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2022/06/21/17:33</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Fruit</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer fid;<br>    <span class="hljs-keyword">private</span> String fname;<br>    <span class="hljs-keyword">private</span> Integer price;<br>    <span class="hljs-keyword">private</span> Integer fcount;<br>    <span class="hljs-keyword">private</span> String remark;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Fruit</span><span class="hljs-params">()</span>&#123;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Fruit</span><span class="hljs-params">(Integer fid, String fname, String remark)</span> &#123;<br>        <span class="hljs-built_in">this</span>.fid = fid;<br>        <span class="hljs-built_in">this</span>.fname = fname;<br>        <span class="hljs-built_in">this</span>.remark = remark;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Fruit</span><span class="hljs-params">(Integer fid, String fname, Integer price, Integer fcount, String remark)</span> &#123;<br>        <span class="hljs-built_in">this</span>.fid = fid;<br>        <span class="hljs-built_in">this</span>.fname = fname;<br>        <span class="hljs-built_in">this</span>.price = price;<br>        <span class="hljs-built_in">this</span>.fcount = fcount;<br>        <span class="hljs-built_in">this</span>.remark = remark;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> fid+<span class="hljs-string">&quot;\t\t&quot;</span>+fname+<span class="hljs-string">&quot;\t\t&quot;</span>+price+<span class="hljs-string">&quot;\t\t&quot;</span>+fcount+<span class="hljs-string">&quot;\t\t&quot;</span>+remark;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getFid</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> fid;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFid</span><span class="hljs-params">(Integer fid)</span> &#123;<br>        <span class="hljs-built_in">this</span>.fid = fid;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getFname</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> fname;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFname</span><span class="hljs-params">(String fname)</span> &#123;<br>        <span class="hljs-built_in">this</span>.fname = fname;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getPrice</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> price;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPrice</span><span class="hljs-params">(Integer price)</span> &#123;<br>        <span class="hljs-built_in">this</span>.price = price;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getFcount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> fcount;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFcount</span><span class="hljs-params">(Integer fcount)</span> &#123;<br>        <span class="hljs-built_in">this</span>.fcount = fcount;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getRemark</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> remark;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRemark</span><span class="hljs-params">(String remark)</span> &#123;<br>        <span class="hljs-built_in">this</span>.remark = remark;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="2-2-2-dao"><a href="#2-2-2-dao" class="headerlink" title="2.2.2 dao"></a>2.2.2 dao</h4><p>FruitDAO接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zylai.fruit01.dao;<br><br><span class="hljs-keyword">import</span> com.zylai.fruit01.pojo.Fruit;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Zhao YunLai</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2022/06/21/18:02</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">FruitDAO</span> &#123;<br><span class="hljs-comment">//    查询库存列表</span><br>    List&lt;Fruit&gt; <span class="hljs-title function_">getFruitList</span><span class="hljs-params">()</span>;<br><br><span class="hljs-comment">//    根据水果名称查询库存</span><br>    Fruit <span class="hljs-title function_">getFruitByName</span><span class="hljs-params">(String fname)</span>;<br><span class="hljs-comment">//    新增水果库存</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">addFruit</span><span class="hljs-params">(Fruit fruit)</span>;<br><span class="hljs-comment">//    修改库存</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">updateFruit</span><span class="hljs-params">(Fruit fruit)</span>;<br><span class="hljs-comment">//    根据水果名称删除记录</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">deleteFruitByName</span><span class="hljs-params">(String fname)</span>;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>FruitDAOImpl实现类</p><p>注意到这个实现类存在着大量的<strong>代码冗余</strong>，<strong>之后的优化主要对这个类进行优化</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zylai.fruit01.dao.impl;<br><br><span class="hljs-keyword">import</span> com.zylai.fruit01.dao.FruitDAO;<br><span class="hljs-keyword">import</span> com.zylai.fruit01.pojo.Fruit;<br><br><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Zhao YunLai</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2022/06/21/18:05</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FruitDAOImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FruitDAO</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DRIVER</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">URL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/fruitdb?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">USER</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">PWD</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br><br><span class="hljs-comment">//    查询所有的库存信息</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Fruit&gt; <span class="hljs-title function_">getFruitList</span><span class="hljs-params">()</span> &#123;<br>        List&lt;Fruit&gt; fruitList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">psmt</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">//            1.加载驱动</span><br>            Class.forName(DRIVER);<br><span class="hljs-comment">//            2.通过驱动获取连接对象</span><br>             connection= DriverManager.getConnection(URL, USER, PWD);<br><span class="hljs-comment">//            3.编写SQL语句</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from t_fruit&quot;</span>;<br><span class="hljs-comment">//            4.创建预处理命令对象</span><br>             psmt = connection.prepareStatement(sql);<br><span class="hljs-comment">//            5.执行查询</span><br>             rs = psmt.executeQuery();<br><span class="hljs-comment">//            6.解析查询</span><br>            <span class="hljs-keyword">while</span>(rs.next())&#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">fid</span> <span class="hljs-operator">=</span> rs.getInt(<span class="hljs-number">1</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">fname</span> <span class="hljs-operator">=</span> rs.getString(<span class="hljs-number">2</span>);<br>                <span class="hljs-type">int</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> rs.getInt(<span class="hljs-number">3</span>);<br>                <span class="hljs-type">int</span> <span class="hljs-variable">fcount</span> <span class="hljs-operator">=</span> rs.getInt(<span class="hljs-number">4</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">remark</span> <span class="hljs-operator">=</span> rs.getString(<span class="hljs-number">5</span>);<br><br>                <span class="hljs-type">Fruit</span> <span class="hljs-variable">fruit</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fruit</span>(fid,fname,price,fcount,remark);<br>                fruitList.add(fruit);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException | SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span>(rs!=<span class="hljs-literal">null</span>)&#123;<br>                    rs.close();<br>                &#125;<br>                <span class="hljs-keyword">if</span>(psmt!=<span class="hljs-literal">null</span>)&#123;<br>                    psmt.close();<br>                &#125;<br>                <span class="hljs-keyword">if</span>(connection!=<span class="hljs-literal">null</span>)&#123;<br>                    connection.close();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> fruitList;<br>    &#125;<br><br><span class="hljs-comment">//    通过水果名称查询记录</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Fruit <span class="hljs-title function_">getFruitByName</span><span class="hljs-params">(String fname)</span> &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">psmt</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class.forName(DRIVER);<br>            connection = DriverManager.getConnection(URL,USER,PWD);<br><br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from t_fruit where fname=?&quot;</span>;<br>            psmt = connection.prepareStatement(sql);<br>            psmt.setString(<span class="hljs-number">1</span>,fname);<br>            rs= psmt.executeQuery();<br>            <span class="hljs-keyword">if</span>(rs.next())&#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">fid</span> <span class="hljs-operator">=</span> rs.getInt(<span class="hljs-string">&quot;fid&quot;</span>);<br>                <span class="hljs-type">int</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> rs.getInt(<span class="hljs-string">&quot;price&quot;</span>);<br>                <span class="hljs-type">int</span> <span class="hljs-variable">fcount</span> <span class="hljs-operator">=</span> rs.getInt(<span class="hljs-string">&quot;fcount&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">remark</span> <span class="hljs-operator">=</span> rs.getString(<span class="hljs-string">&quot;remark&quot;</span>);<br><br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fruit</span>(fid,fname,price,fcount,remark);<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException | SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span>&#123;<br>                <span class="hljs-keyword">if</span>(rs!=<span class="hljs-literal">null</span>)&#123;<br>                    rs.close();<br>                &#125;<br>                <span class="hljs-keyword">if</span>(psmt!=<span class="hljs-literal">null</span>)&#123;<br>                    psmt.close();<br>                &#125;<br>                <span class="hljs-keyword">if</span>(connection!=<span class="hljs-literal">null</span>)&#123;<br>                    connection.close();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br><span class="hljs-comment">//    添加水果</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">addFruit</span><span class="hljs-params">(Fruit fruit)</span> &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">psmt</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class.forName(DRIVER);<br>            connection = DriverManager.getConnection(URL,USER,PWD);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into t_fruit values(0,?,?,?,?)&quot;</span>;<br>            psmt = connection.prepareStatement(sql);<br>            psmt.setString(<span class="hljs-number">1</span>,fruit.getFname());<br>            psmt.setInt(<span class="hljs-number">2</span>,fruit.getPrice());<br>            psmt.setInt(<span class="hljs-number">3</span>,fruit.getFcount());<br>            psmt.setString(<span class="hljs-number">4</span>,fruit.getRemark());<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> psmt.executeUpdate();<br>            <span class="hljs-keyword">return</span> i&gt;<span class="hljs-number">0</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException | SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span>(psmt!=<span class="hljs-literal">null</span>)&#123;<br>                    psmt.close();<br>                &#125;<br>                <span class="hljs-keyword">if</span>(connection!=<span class="hljs-literal">null</span>)&#123;<br>                    connection.close();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br><span class="hljs-comment">//    更新水果库存信息</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">updateFruit</span><span class="hljs-params">(Fruit fruit)</span> &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">psmt</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class.forName(DRIVER);<br>            connection = DriverManager.getConnection(URL,USER,PWD);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update t_fruit set fname=?,price=?,fcount=?,remark=? where fid=?&quot;</span>;<br>            psmt = connection.prepareStatement(sql);<br>            psmt.setString(<span class="hljs-number">1</span>, fruit.getFname());<br>            psmt.setInt(<span class="hljs-number">2</span>,fruit.getPrice());<br>            psmt.setInt(<span class="hljs-number">3</span>,fruit.getFcount());<br>            psmt.setString(<span class="hljs-number">4</span>,fruit.getRemark());<br>            psmt.setInt(<span class="hljs-number">5</span>,fruit.getFid());<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> psmt.executeUpdate();<br>            <span class="hljs-keyword">return</span> i&gt;<span class="hljs-number">0</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException | SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span>(psmt!=<span class="hljs-literal">null</span>)&#123;<br>                    psmt.close();<br>                &#125;<br>                <span class="hljs-keyword">if</span>(connection!=<span class="hljs-literal">null</span>)&#123;<br>                    connection.close();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br><span class="hljs-comment">//    删除水果</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">deleteFruitByName</span><span class="hljs-params">(String fname)</span> &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">psmt</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            Class.forName(DRIVER);<br>            connection = DriverManager.getConnection(URL,USER,PWD);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;delete from t_fruit where fname=?&quot;</span>;<br>            psmt = connection.prepareStatement(sql);<br>            psmt.setString(<span class="hljs-number">1</span>,fname);<br>            <span class="hljs-keyword">return</span> psmt.executeUpdate()&gt;<span class="hljs-number">0</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException | SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span>(psmt!=<span class="hljs-literal">null</span>)&#123;<br>                    psmt.close();<br>                &#125;<br>                <span class="hljs-keyword">if</span>(connection!=<span class="hljs-literal">null</span>)&#123;<br>                    connection.close();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="2-2-3-controller"><a href="#2-2-3-controller" class="headerlink" title="2.2.3 controller"></a>2.2.3 controller</h4><p>处理请求层，由于业务比较简单，所以一些业务都在controller里面进行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zylai.fruit01.controller;<br><br><span class="hljs-keyword">import</span> com.zylai.fruit01.dao.FruitDAO;<br><span class="hljs-keyword">import</span> com.zylai.fruit01.dao.impl.FruitDAOImpl;<br><span class="hljs-keyword">import</span> com.zylai.fruit01.pojo.Fruit;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Zhao YunLai</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2022/06/21/17:35</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Menu</span> &#123;<br><br>    <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">FruitDAO</span> <span class="hljs-variable">fruitDAO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FruitDAOImpl</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">showMainMenu</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;=================欢迎使用水果库存系统=====================&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;1.查看水果库存列表&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;2.添加水果库存信息&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;3.查看特定水果库存信息&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;4.水果下架&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;5.退出&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;======================================================&quot;</span>);<br>        System.out.print(<span class="hljs-string">&quot;请选择：&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> input.nextInt();<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">if</span>(res&lt;<span class="hljs-number">1</span>||res&gt;<span class="hljs-number">5</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot;请在1~5当中进行选择！&quot;</span>);<br>                System.out.print(<span class="hljs-string">&quot;请选择：&quot;</span>);<br>                res = input.nextInt();<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><span class="hljs-comment">//    显示所有水果库存</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showFruitList</span><span class="hljs-params">()</span>&#123;<br>        List&lt;Fruit&gt; fruitList = fruitDAO.getFruitList();<br>        System.out.println(<span class="hljs-string">&quot;------------------------------------------------------&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;编号\t\t名称\t\t单价\t\t库存\t\t备注\t\t&quot;</span>);<br>        <span class="hljs-keyword">if</span>(fruitList==<span class="hljs-literal">null</span>||fruitList.size()&lt;=<span class="hljs-number">0</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;对不起，库存为空&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">for</span> (Fruit fruit : fruitList) &#123;<br>                System.out.println(fruit);<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;------------------------------------------------------&quot;</span>);<br>    &#125;<br><br><span class="hljs-comment">//    添加水果库存信息 -- 业务方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addFruit</span><span class="hljs-params">()</span>&#123;<br>        System.out.print(<span class="hljs-string">&quot;请输入水果名称：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">fname</span> <span class="hljs-operator">=</span> input.next();<br><span class="hljs-comment">//       判断是添加库存还是添加一个新水果</span><br>        <span class="hljs-type">Fruit</span> <span class="hljs-variable">fruitByName</span> <span class="hljs-operator">=</span> fruitDAO.getFruitByName(fname);<br>        <span class="hljs-keyword">if</span>(fruitByName==<span class="hljs-literal">null</span>)&#123;<span class="hljs-comment">//说明库存中没有这个水果，直接添加</span><br>            System.out.print(<span class="hljs-string">&quot;请输入水果单价：&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> input.nextInt();<br>            System.out.print(<span class="hljs-string">&quot;请输入水果库存量：&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">fcount</span> <span class="hljs-operator">=</span> input.nextInt();<br>            System.out.print(<span class="hljs-string">&quot;请输入水果备注：&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">remark</span> <span class="hljs-operator">=</span> input.next();<br>            fruitByName = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fruit</span>(<span class="hljs-number">0</span>,fname,price,fcount,remark);<br><span class="hljs-comment">//            调用dao</span><br>            fruitDAO.addFruit(fruitByName);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.print(<span class="hljs-string">&quot;请输入追加的库存量：&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">fcount</span> <span class="hljs-operator">=</span> input.nextInt();<br>            fruitByName.setFcount(fruitByName.getFcount()+fcount);<br>            fruitDAO.updateFruit(fruitByName);<br>        &#125;<br>    &#125;<br><span class="hljs-comment">//    查看特定水果库存信息</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showFruitInfo</span><span class="hljs-params">()</span>&#123;<br>        System.out.print(<span class="hljs-string">&quot;请输入水果名称：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">fname</span> <span class="hljs-operator">=</span> input.next();<br>        <span class="hljs-type">Fruit</span> <span class="hljs-variable">fruit</span> <span class="hljs-operator">=</span> fruitDAO.getFruitByName(fname);<br>        <span class="hljs-keyword">if</span>(fruit == <span class="hljs-literal">null</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;对不起，没有找到指定的水果库存记录&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;------------------------------------------------------&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;编号\t\t名称\t\t单价\t\t库存\t\t备注\t\t&quot;</span>);<br>            System.out.println(fruit);<br>            System.out.println(<span class="hljs-string">&quot;------------------------------------------------------&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteFruit</span><span class="hljs-params">()</span>&#123;<br>        System.out.print(<span class="hljs-string">&quot;请输入水果名称：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">fname</span> <span class="hljs-operator">=</span> input.next();<br>        <span class="hljs-type">Fruit</span> <span class="hljs-variable">fruit</span> <span class="hljs-operator">=</span> fruitDAO.getFruitByName(fname);<br>        <span class="hljs-keyword">if</span>(fruit==<span class="hljs-literal">null</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;对不起，没有找到要下架的水果信息&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.print(<span class="hljs-string">&quot;是否下架？（Y/N）&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> input.next();<br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;y&quot;</span>.equalsIgnoreCase(str))&#123;<br>                <span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> fruitDAO.deleteFruitByName(fname);<br>                <span class="hljs-keyword">if</span>(b)&#123;<br>                    System.out.println(<span class="hljs-string">&quot;下架成功！&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><span class="hljs-comment">//    退出</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">exit</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">do</span>&#123;<br>            System.out.print(<span class="hljs-string">&quot;是否确认退出？(Y/N):&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> input.next();<br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;y&quot;</span>.equalsIgnoreCase(res))&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;n&quot;</span>.equalsIgnoreCase(res))&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>);<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="2-2-4-view"><a href="#2-2-4-view" class="headerlink" title="2.2.4 view"></a>2.2.4 view</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zylai.fruit01.view;<br><br><span class="hljs-keyword">import</span> com.zylai.fruit01.controller.Menu;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Zhao YunLai</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2022/06/21/17:36</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Menu</span> <span class="hljs-variable">menu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Menu</span>();<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">while</span>(!flag)&#123;<br>            <span class="hljs-comment">//        调用主菜单的方法</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">slt</span> <span class="hljs-operator">=</span> menu.showMainMenu();<br>            <span class="hljs-keyword">switch</span>(slt)&#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    menu.showFruitList();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                    menu.addFruit();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                    menu.showFruitInfo();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>                    menu.deleteFruit();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>                    flag = menu.exit();<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;谢谢使用&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="2-2-5-最初版总结"><a href="#2-2-5-最初版总结" class="headerlink" title="2.2.5 最初版总结"></a>2.2.5 最初版总结</h4><p>代码的冗余量很大，主要是dao层的实现类，每个方法都要重复建立驱动、获取连接、关闭资源等操作。</p><h3 id="2-3-改进：对于FruitDAOImpl中获取连接操作以及释放资源操作做了提取"><a href="#2-3-改进：对于FruitDAOImpl中获取连接操作以及释放资源操作做了提取" class="headerlink" title="2.3 改进：对于FruitDAOImpl中获取连接操作以及释放资源操作做了提取"></a>2.3 改进：对于FruitDAOImpl中获取连接操作以及释放资源操作做了提取</h3><p>这次的改进就是对于FruitDAOImpl中获取连接操作以及释放资源操作做了提取</p><p>如下：将加载驱动获取连接封装在getConnection方法中，将关闭资源封装在close方法中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">private</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//       1.加载驱动</span><br>            Class.forName(DRIVER);<br>            <span class="hljs-comment">//            2.通过驱动获取连接对象</span><br>            <span class="hljs-keyword">return</span> DriverManager.getConnection(URL, USER, PWD);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException | SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">(Connection connection,PreparedStatement psmt, ResultSet rs)</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span>(rs!=<span class="hljs-literal">null</span>)&#123;<br>                rs.close();<br>            &#125;<br>            <span class="hljs-keyword">if</span>(psmt!=<span class="hljs-literal">null</span>)&#123;<br>                psmt.close();<br>            &#125;<br>            <span class="hljs-keyword">if</span>(connection!=<span class="hljs-literal">null</span>)&#123;<br>                connection.close();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br><span class="hljs-comment">//实际中使用</span><br><span class="hljs-comment">//    通过水果名称查询记录</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Fruit <span class="hljs-title function_">getFruitByName</span><span class="hljs-params">(String fname)</span> &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">psmt</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br><br>            connection = getConnection();<br><br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from t_fruit where fname=?&quot;</span>;<br>            psmt = connection.prepareStatement(sql);<br>            psmt.setString(<span class="hljs-number">1</span>,fname);<br>            rs= psmt.executeQuery();<br>            <span class="hljs-keyword">if</span>(rs.next())&#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">fid</span> <span class="hljs-operator">=</span> rs.getInt(<span class="hljs-string">&quot;fid&quot;</span>);<br>                <span class="hljs-type">int</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> rs.getInt(<span class="hljs-string">&quot;price&quot;</span>);<br>                <span class="hljs-type">int</span> <span class="hljs-variable">fcount</span> <span class="hljs-operator">=</span> rs.getInt(<span class="hljs-string">&quot;fcount&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">remark</span> <span class="hljs-operator">=</span> rs.getString(<span class="hljs-string">&quot;remark&quot;</span>);<br><br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fruit</span>(fid,fname,price,fcount,remark);<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> ( SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            close(connection,psmt,rs);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="2-4-改进：设置抽象类，并抽取增删改操作"><a href="#2-4-改进：设置抽象类，并抽取增删改操作" class="headerlink" title="2.4 改进：设置抽象类，并抽取增删改操作"></a>2.4 改进：设置抽象类，并抽取增删改操作</h3><p>可以看到下面这个三个操作的步骤完全一样，<strong>不一样的地方只是SQL语句和psmt设置的参数</strong><br>因此可以将这些相同的操作抽取出来</p><ul><li><p>addFruit:<br>1.获取连接<br>2.编写SQL<br>3.psmt<br>4.执行更新<br>5.关闭资源</p></li><li><p>updateFruit：<br>1.获取连接<br>2.编写SQL<br>3.psmt<br>4.执行更新<br>5.关闭资源</p></li><li><p>deleteFruit<br>1.获取连接<br>2.编写SQL<br>3.psmt<br>4.执行更新<br>5.关闭连接</p></li></ul><p>此外，这里只是涉及到一个表的操作，当有多个表时，就涉及到多个dao类，而这多个dao类都需要这共同的驱动地址，数据库url，用户名，密码，获取驱动方法，关闭资源的方法，抽取增删改操作方法。</p><p>因此，加入一个抽象类baseDAO，里面提供公共的常量和方法，并且把抽取的增删改方法加入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zylai.fruit.dao.base;<br><br><span class="hljs-keyword">import</span> java.sql.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Zhao YunLai</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2022/06/21/21:45</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseDAO</span> &#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DRIVER</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">URL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/fruitdb?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&quot;</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">USER</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">PWD</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br><br>    <span class="hljs-keyword">protected</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//       1.加载驱动</span><br>            Class.forName(DRIVER);<br>            <span class="hljs-comment">//            2.通过驱动获取连接对象</span><br>            <span class="hljs-keyword">return</span> DriverManager.getConnection(URL, USER, PWD);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException | SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br><span class="hljs-comment">//    关闭资源</span><br>    <span class="hljs-keyword">protected</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">(Connection connection, PreparedStatement psmt, ResultSet rs)</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span>(rs!=<span class="hljs-literal">null</span>)&#123;<br>                rs.close();<br>            &#125;<br>            <span class="hljs-keyword">if</span>(psmt!=<span class="hljs-literal">null</span>)&#123;<br>                psmt.close();<br>            &#125;<br>            <span class="hljs-keyword">if</span>(connection!=<span class="hljs-literal">null</span>)&#123;<br>                connection.close();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br><span class="hljs-comment">//    执行更新，返回影响行数   </span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> <span class="hljs-title function_">executeUpdate</span><span class="hljs-params">(String sql,Object... params)</span>&#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">psmt</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            connection = getConnection();<br>            psmt = connection.prepareStatement(sql);<br>            <span class="hljs-keyword">if</span>(params!=<span class="hljs-literal">null</span> &amp;&amp; params.length&gt;<span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; params.length; i++) &#123;<br>                    psmt.setObject(i+<span class="hljs-number">1</span>,params[i]);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> psmt.executeUpdate();<br>        &#125; <span class="hljs-keyword">catch</span> ( SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            close(connection,psmt,<span class="hljs-literal">null</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后让daoImpl继承该抽象类</p><p>由于没有涉及到查询的改进，这里省去查询的方法。可以看到对于增删改方法，只需要调用父类的更新执行方法，传入sql语句和参数即可完成业务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zylai.fruit.dao.impl;<br><br><span class="hljs-keyword">import</span> com.zylai.fruit.dao.FruitDAO;<br><span class="hljs-keyword">import</span> com.zylai.fruit.dao.base.BaseDAO;<br><span class="hljs-keyword">import</span> com.zylai.fruit.pojo.Fruit;<br><br><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Zhao YunLai</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2022/06/21/18:05</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FruitDAOImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseDAO</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FruitDAO</span> &#123;<br><br><span class="hljs-comment">//    添加水果</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">addFruit</span><span class="hljs-params">(Fruit fruit)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into t_fruit values(0,?,?,?,?)&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.executeUpdate(sql,fruit.getFname(),fruit.getPrice(),fruit.getFcount(),fruit.getRemark())&gt;<span class="hljs-number">0</span>;<br>    &#125;<br><br><span class="hljs-comment">//    更新水果库存信息</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">updateFruit</span><span class="hljs-params">(Fruit fruit)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update t_fruit set fname=?,price=?,fcount=?,remark=? where fid=?&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.executeUpdate(sql,fruit.getFname(),fruit.getPrice(),fruit.getFcount(),fruit.getRemark(),fruit.getFid())&gt;<span class="hljs-number">0</span>;<br>    &#125;<br><br><span class="hljs-comment">//    删除水果</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">deleteFruitByName</span><span class="hljs-params">(String fname)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;delete from t_fruit where fname=?&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.executeUpdate(sql,fname)&gt;<span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-5-改进：抽取查询操作"><a href="#2-5-改进：抽取查询操作" class="headerlink" title="2.5 改进：抽取查询操作"></a>2.5 改进：抽取查询操作</h3><h4 id="2-5-1-使用泛型"><a href="#2-5-1-使用泛型" class="headerlink" title="2.5.1 使用泛型"></a>2.5.1 使用泛型</h4><p>通过执行查询操作返回查询的结果集，然后通过get方法得到指定列的值赋值给实体类比如Fruit，而对于baseDAO会有多个DAOImpl继承它，因此不能把实体类写死，所以采用泛型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseDAO</span>&lt;T&gt; &#123;&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FruitDAOImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseDAO</span>&lt;Fruit&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FruitDAO</span> &#123;&#125;<br></code></pre></td></tr></table></figure><h4 id="2-5-2-通过反射得到真正的类"><a href="#2-5-2-通过反射得到真正的类" class="headerlink" title="2.5.2 通过反射得到真正的类"></a>2.5.2 通过反射得到真正的类</h4><p>因为泛型只是一个符号，我们不能直接通过泛型创建实例，所以用到反射技术来确定真正的实体类。</p><p>首先在类中定义Class 属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//    T的Class对象</span><br>    <span class="hljs-keyword">private</span> Class entityClass;<br></code></pre></td></tr></table></figure><p>在BaseDAO的无参构造器中，确定真正的实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BaseDAO</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//        getClass获取Class对象，当前我们执行的是new FruitDAOImpl（），创建的是FruitDAOImpl实例</span><br><span class="hljs-comment">//        那么构造方法首先会调用父类（BaseDAO）的无参构造方法</span><br><span class="hljs-comment">//        因此此处的getClass方法执行，获取的是FruitDAOImpl的Class</span><br><span class="hljs-comment">//        所以使用getGenericSuperclass</span><br><span class="hljs-comment">//        getGenericSuperclass是获取父类的泛型，即获取BaseDAO的泛型</span><br>        <span class="hljs-type">Type</span> <span class="hljs-variable">genericSuperclass</span> <span class="hljs-operator">=</span> getClass().getGenericSuperclass();<br><span class="hljs-comment">//         ParameterizedType:参数化类型</span><br><span class="hljs-comment">//        获取&lt;T&gt;（注意，泛型可以传递多个如&lt;T,A,B&gt;，所以返回值是一个数组）中的T的真是类型</span><br>        Type[] actualTypeArguments = ((ParameterizedType) genericSuperclass).getActualTypeArguments();<br>        <span class="hljs-type">Type</span> <span class="hljs-variable">actualType</span> <span class="hljs-operator">=</span> actualTypeArguments[<span class="hljs-number">0</span>];<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            entityClass = Class.forName(actualType.getTypeName());<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="2-5-3-查询方法"><a href="#2-5-3-查询方法" class="headerlink" title="2.5.3 查询方法"></a>2.5.3 查询方法</h4><p>在处理结果集时我们不知道T到底有几个参数，是什么类型。因此，我们需要获取结果集的元数据，所谓元数据就是描述结果集数据的数据，简单来讲，就是这个结果集有哪些列，什么类型等等。</p><p>之后通过Class对象创建一个T的实例进行操作即可</p><p>先定义一个工具函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//    通过反射，给obj对象的property属性赋propertyValue值</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object obj,String property,Object propertyValue)</span>&#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> obj.getClass();<br><span class="hljs-comment">//        获取property这个字符串对应的属性名，比如“fid”去找obj中的fid属性</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Field</span> <span class="hljs-variable">field</span>  <span class="hljs-operator">=</span> clazz.getDeclaredField(property);<br>            <span class="hljs-keyword">if</span>(field!=<span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-comment">//            强制访问</span><br>                field.setAccessible(<span class="hljs-literal">true</span>);<br>                <span class="hljs-comment">//为obj对象设置filed属性的值</span><br>                field.set(obj,propertyValue);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException | IllegalAccessException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>执行查询的函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//    执行查询</span><br>    <span class="hljs-keyword">protected</span> List&lt;T&gt; <span class="hljs-title function_">executeQuery</span><span class="hljs-params">(String sql,Object... params)</span>&#123;<br>        List&lt;T&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">//            获取连接</span><br>            connection = getConnection();<br><span class="hljs-comment">//            设置预处理对象</span><br>            psmt = connection.prepareStatement(sql);<br><span class="hljs-comment">//            设置参数</span><br>            setParams(psmt,params);<br><span class="hljs-comment">//            执行查询</span><br>            rs= psmt.executeQuery();<br><span class="hljs-comment">//            处理结果集</span><br><span class="hljs-comment">//            难点在于如何处理T，我们不知道T是什么类型并且不知道T有多少个参数</span><br><span class="hljs-comment">//            通过rs可以获取结果集的元数据</span><br><span class="hljs-comment">//            元数据：描述结果集数据的数据，简单讲，就是这个结果接有哪些列，什么类型等等</span><br>            <span class="hljs-type">ResultSetMetaData</span> <span class="hljs-variable">metaData</span> <span class="hljs-operator">=</span> rs.getMetaData();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">columnCount</span> <span class="hljs-operator">=</span> metaData.getColumnCount();<br>            <span class="hljs-keyword">while</span>(rs.next())&#123;<br>                <span class="hljs-type">T</span> <span class="hljs-variable">entity</span> <span class="hljs-operator">=</span> (T)entityClass.newInstance();<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; columnCount; i++) &#123;<br><span class="hljs-comment">//               获取列名</span><br>                    <span class="hljs-type">String</span> <span class="hljs-variable">columnName</span> <span class="hljs-operator">=</span> metaData.getColumnName(i + <span class="hljs-number">1</span>);<br><span class="hljs-comment">//                获取列对应的值</span><br>                    <span class="hljs-type">Object</span> <span class="hljs-variable">columnValue</span> <span class="hljs-operator">=</span> rs.getObject(i + <span class="hljs-number">1</span>);<br><span class="hljs-comment">//                    这里获取了列名，就需要根据列名把值填充给entity对象</span><br>                    setValue(entity,columnName,columnValue);<br>                &#125;<br>                list.add(entity);<br><br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (InstantiationException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            close(connection,psmt,rs);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br></code></pre></td></tr></table></figure><h4 id="2-5-4-改进后的整个BaseDAO类为："><a href="#2-5-4-改进后的整个BaseDAO类为：" class="headerlink" title="2.5.4 改进后的整个BaseDAO类为："></a>2.5.4 改进后的整个BaseDAO类为：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zylai.fruit.dao.base;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.ParameterizedType;<br><span class="hljs-keyword">import</span> java.lang.reflect.Type;<br><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Zhao YunLai</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2022/06/21/21:45</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseDAO</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DRIVER</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">URL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/fruitdb?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&quot;</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">USER</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">PWD</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br><br><span class="hljs-comment">//    老师是吧这几个放到这里的，我觉得可能会出现并发问题，不过目前不考虑这个</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">psmt</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br><span class="hljs-comment">//    T的Class对象</span><br>    <span class="hljs-keyword">private</span> Class entityClass;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BaseDAO</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//        getClass获取Class对象，当前我们执行的是new FruitDAOImpl（），创建的是FruitDAOImpl实例</span><br><span class="hljs-comment">//        那么构造方法首先会调用父类（BaseDAO）的无参构造方法</span><br><span class="hljs-comment">//        因此此处的getClass方法执行，获取的是FruitDAOImpl的Class</span><br><span class="hljs-comment">//        所以使用getGenericSuperclass</span><br><span class="hljs-comment">//        getGenericSuperclass是获取父类的泛型，即获取BaseDAO的泛型</span><br>        <span class="hljs-type">Type</span> <span class="hljs-variable">genericSuperclass</span> <span class="hljs-operator">=</span> getClass().getGenericSuperclass();<br><span class="hljs-comment">//         ParameterizedType:参数化类型</span><br><span class="hljs-comment">//        获取&lt;T&gt;（注意，泛型可以传递多个如&lt;T,A,B&gt;，所以返回值是一个数组）中的T的真是类型</span><br>        Type[] actualTypeArguments = ((ParameterizedType) genericSuperclass).getActualTypeArguments();<br>        <span class="hljs-type">Type</span> <span class="hljs-variable">actualType</span> <span class="hljs-operator">=</span> actualTypeArguments[<span class="hljs-number">0</span>];<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            entityClass = Class.forName(actualType.getTypeName());<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//       1.加载驱动</span><br>            Class.forName(DRIVER);<br>            <span class="hljs-comment">//            2.通过驱动获取连接对象</span><br>            <span class="hljs-keyword">return</span> DriverManager.getConnection(URL, USER, PWD);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException | SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br><span class="hljs-comment">//    关闭资源</span><br>    <span class="hljs-keyword">protected</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">(Connection connection, PreparedStatement psmt, ResultSet rs)</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span>(rs!=<span class="hljs-literal">null</span>)&#123;<br>                rs.close();<br>            &#125;<br>            <span class="hljs-keyword">if</span>(psmt!=<span class="hljs-literal">null</span>)&#123;<br>                psmt.close();<br>            &#125;<br>            <span class="hljs-keyword">if</span>(connection!=<span class="hljs-literal">null</span>)&#123;<br>                connection.close();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><span class="hljs-comment">//    给预处理对象设置参数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setParams</span><span class="hljs-params">(PreparedStatement psmt,Object... params)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-keyword">if</span>(params!=<span class="hljs-literal">null</span> &amp;&amp; params.length&gt;<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; params.length; i++) &#123;<br>                psmt.setObject(i+<span class="hljs-number">1</span>,params[i]);<br>            &#125;<br>        &#125;<br>    &#125;<br><br><br><span class="hljs-comment">//    通过反射，给obj对象的property属性赋propertyValue值</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object obj,String property,Object propertyValue)</span>&#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> obj.getClass();<br><span class="hljs-comment">//        获取property这个字符串对应的属性名，比如“fid”去找obj中的fid属性</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Field</span> <span class="hljs-variable">field</span>  <span class="hljs-operator">=</span> clazz.getDeclaredField(property);<br>            <span class="hljs-keyword">if</span>(field!=<span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-comment">//            强制访问</span><br>                field.setAccessible(<span class="hljs-literal">true</span>);<br>                <span class="hljs-comment">//为obj对象设置filed属性的值</span><br>                field.set(obj,propertyValue);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException | IllegalAccessException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br><span class="hljs-comment">//    执行查询</span><br>    <span class="hljs-keyword">protected</span> List&lt;T&gt; <span class="hljs-title function_">executeQuery</span><span class="hljs-params">(String sql,Object... params)</span>&#123;<br>        List&lt;T&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">//            获取连接</span><br>            connection = getConnection();<br><span class="hljs-comment">//            设置预处理对象</span><br>            psmt = connection.prepareStatement(sql);<br><span class="hljs-comment">//            设置参数</span><br>            setParams(psmt,params);<br><span class="hljs-comment">//            执行查询</span><br>            rs= psmt.executeQuery();<br><span class="hljs-comment">//            处理结果集</span><br><span class="hljs-comment">//            难点在于如何处理T，我们不知道T是什么类型并且不知道T有多少个参数</span><br><span class="hljs-comment">//            通过rs可以获取结果集的元数据</span><br><span class="hljs-comment">//            元数据：描述结果集数据的数据，简单讲，就是这个结果接有哪些列，什么类型等等</span><br>            <span class="hljs-type">ResultSetMetaData</span> <span class="hljs-variable">metaData</span> <span class="hljs-operator">=</span> rs.getMetaData();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">columnCount</span> <span class="hljs-operator">=</span> metaData.getColumnCount();<br>            <span class="hljs-keyword">while</span>(rs.next())&#123;<br>                <span class="hljs-type">T</span> <span class="hljs-variable">entity</span> <span class="hljs-operator">=</span> (T)entityClass.newInstance();<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; columnCount; i++) &#123;<br><span class="hljs-comment">//               获取列名</span><br>                    <span class="hljs-type">String</span> <span class="hljs-variable">columnName</span> <span class="hljs-operator">=</span> metaData.getColumnName(i + <span class="hljs-number">1</span>);<br><span class="hljs-comment">//                获取列对应的值</span><br>                    <span class="hljs-type">Object</span> <span class="hljs-variable">columnValue</span> <span class="hljs-operator">=</span> rs.getObject(i + <span class="hljs-number">1</span>);<br><span class="hljs-comment">//                    这里获取了列名，就需要根据列名把值填充给entity对象</span><br>                    setValue(entity,columnName,columnValue);<br>                &#125;<br>                list.add(entity);<br><br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (InstantiationException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            close(connection,psmt,rs);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br><span class="hljs-comment">//    通过查询返回一条记录</span><br>    <span class="hljs-keyword">protected</span> T <span class="hljs-title function_">load</span><span class="hljs-params">(String sql,Object... params)</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">//            获取连接</span><br>            connection = getConnection();<br><span class="hljs-comment">//            设置预处理对象</span><br>            psmt = connection.prepareStatement(sql);<br><span class="hljs-comment">//            设置参数</span><br>            setParams(psmt,params);<br><span class="hljs-comment">//            执行查询</span><br>            rs= psmt.executeQuery();<br><span class="hljs-comment">//            处理结果集</span><br><span class="hljs-comment">//            难点在于如何处理T，我们不知道T是什么类型并且不知道T有多少个参数</span><br><span class="hljs-comment">//            通过rs可以获取结果集的元数据</span><br><span class="hljs-comment">//            元数据：描述结果集数据的数据，简单讲，就是这个结果接有哪些列，什么类型等等</span><br>            <span class="hljs-type">ResultSetMetaData</span> <span class="hljs-variable">metaData</span> <span class="hljs-operator">=</span> rs.getMetaData();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">columnCount</span> <span class="hljs-operator">=</span> metaData.getColumnCount();<br>            <span class="hljs-keyword">if</span> (rs.next())&#123;<br>                <span class="hljs-type">T</span> <span class="hljs-variable">entity</span> <span class="hljs-operator">=</span> (T)entityClass.newInstance();<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; columnCount; i++) &#123;<br><span class="hljs-comment">//               获取列名</span><br>                    <span class="hljs-type">String</span> <span class="hljs-variable">columnName</span> <span class="hljs-operator">=</span> metaData.getColumnName(i + <span class="hljs-number">1</span>);<br><span class="hljs-comment">//                获取列对应的值</span><br>                    <span class="hljs-type">Object</span> <span class="hljs-variable">columnValue</span> <span class="hljs-operator">=</span> rs.getObject(i + <span class="hljs-number">1</span>);<br><span class="hljs-comment">//                    这里获取了列名，就需要根据列名把值填充给entity对象</span><br>                    setValue(entity,columnName,columnValue);<br>                &#125;<br>                <span class="hljs-keyword">return</span> entity;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (InstantiationException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            close(connection,psmt,rs);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br><span class="hljs-comment">//    执行复杂的查询，返回统计结果，这个方法暂时没有用到</span><br>    <span class="hljs-keyword">protected</span> Object[] executeComplexQuery(String sql,Object... params)&#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">//            获取连接</span><br>            connection = getConnection();<br><span class="hljs-comment">//            设置预处理对象</span><br>            psmt = connection.prepareStatement(sql);<br><span class="hljs-comment">//            设置参数</span><br>            setParams(psmt,params);<br><span class="hljs-comment">//            执行查询</span><br>            rs= psmt.executeQuery();<br><span class="hljs-comment">//            处理结果集</span><br><span class="hljs-comment">//            难点在于如何处理T，我们不知道T是什么类型并且不知道T有多少个参数</span><br><span class="hljs-comment">//            通过rs可以获取结果集的元数据</span><br><span class="hljs-comment">//            元数据：描述结果集数据的数据，简单讲，就是这个结果接有哪些列，什么类型等等</span><br>            <span class="hljs-type">ResultSetMetaData</span> <span class="hljs-variable">metaData</span> <span class="hljs-operator">=</span> rs.getMetaData();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">columnCount</span> <span class="hljs-operator">=</span> metaData.getColumnCount();<br>            <span class="hljs-keyword">if</span> (rs.next())&#123;<br>                Object[] columnValueArr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[columnCount];<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; columnCount; i++) &#123;<br><span class="hljs-comment">//                获取列对应的值</span><br>                    <span class="hljs-type">Object</span> <span class="hljs-variable">columnValue</span> <span class="hljs-operator">=</span> rs.getObject(i + <span class="hljs-number">1</span>);<br>                    columnValueArr[i]=columnValue;<br>                &#125;<br>                <span class="hljs-keyword">return</span> columnValueArr;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            close(connection,psmt,rs);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="3-数据库连接池"><a href="#3-数据库连接池" class="headerlink" title="3 数据库连接池"></a>3 数据库连接池</h2><h3 id="3-1-概述和优势"><a href="#3-1-概述和优势" class="headerlink" title="3.1 概述和优势"></a>3.1 概述和优势</h3><p>之前的的连接都是用的时候才创建连接，当使用完成之后就销毁，这样效率很低，浪费资源。</p><p>使用数据库连接池就可以先创建多个连接对象放到连接池中，等到使用的时候直接从连接池中取出来，用完之后归还。</p><h4 id="3-1-1-好处："><a href="#3-1-1-好处：" class="headerlink" title="3.1.1 好处："></a>3.1.1 好处：</h4><ol><li>响应时间更快</li><li>连接对象的利用率更高</li></ol><h4 id="3-1-2详细配置参数："><a href="#3-1-2详细配置参数：" class="headerlink" title="3.1.2详细配置参数："></a>3.1.2详细配置参数：</h4><p>不需要背，只是参考，记住主要用的几个就可以了</p><div class="table-container"><table><thead><tr><th><strong>配置</strong></th><th><strong>缺省</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>name</td><td></td><td>配置这个属性的意义在于，如果存在多个数据源，监控的时候可以通过名字来区分开来。   如果没有配置，将会生成一个名字，格式是：”DataSource-” +   System.identityHashCode(this)</td></tr><tr><td>url</td><td></td><td>连接数据库的url，不同数据库不一样。例如：mysql :   jdbc:mysql://10.20.153.104:3306/druid2      oracle :   jdbc:oracle:thin:@10.20.149.85:1521:ocnauto</td></tr><tr><td>username</td><td></td><td>连接数据库的用户名</td></tr><tr><td>password</td><td></td><td>连接数据库的密码。如果你不希望密码直接写在配置文件中，可以使用ConfigFilter。详细看这里：<a href="https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter">https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter</a></td></tr><tr><td>driverClassName</td><td></td><td>根据url自动识别   这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName(建议配置下)</td></tr><tr><td>initialSize</td><td>0</td><td>初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时</td></tr><tr><td>maxActive</td><td>8</td><td>最大连接池数量</td></tr><tr><td>maxIdle</td><td>8</td><td>已经不再使用，配置了也没效果</td></tr><tr><td>minIdle</td><td></td><td>最小连接池数量</td></tr><tr><td>maxWait</td><td></td><td>获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。</td></tr><tr><td>poolPreparedStatements</td><td>false</td><td>是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。</td></tr><tr><td>maxOpenPreparedStatements</td><td>-1</td><td>要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100</td></tr><tr><td>validationQuery</td><td></td><td>用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。</td></tr><tr><td>testOnBorrow</td><td>true</td><td>申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</td></tr><tr><td>testOnReturn</td><td>false</td><td>归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能</td></tr><tr><td>testWhileIdle</td><td>false</td><td>建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</td></tr><tr><td>timeBetweenEvictionRunsMillis</td><td></td><td>有两个含义： 1)Destroy线程会检测连接的间隔时间2)testWhileIdle的判断依据，详细看testWhileIdle属性的说明</td></tr><tr><td>numTestsPerEvictionRun</td><td></td><td>不再使用，一个DruidDataSource只支持一个EvictionRun</td></tr><tr><td>minEvictableIdleTimeMillis</td><td></td><td></td></tr><tr><td>connectionInitSqls</td><td></td><td>物理连接初始化的时候执行的sql</td></tr><tr><td>exceptionSorter</td><td></td><td>根据dbType自动识别   当数据库抛出一些不可恢复的异常时，抛弃连接</td></tr><tr><td>filters</td><td></td><td>属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：   监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall</td></tr><tr><td>proxyFilters</td><td></td><td>类型是List，如果同时配置了filters和proxyFilters，是组合关系，并非替换关系</td></tr></tbody></table></div><h3 id="3-2-使用"><a href="#3-2-使用" class="headerlink" title="3.2 使用"></a>3.2 使用</h3><h4 id="3-2-1-基础使用"><a href="#3-2-1-基础使用" class="headerlink" title="3.2.1 基础使用"></a>3.2.1 基础使用</h4><p>将对应的jar引入到项目中之后，创建<code>DruidDataSource</code>对象，进行连接即可。</p><p>注意:</p><ol><li>被close的连接对象并没有真正关闭，而是将状态重新设置为空闲状态放回池子</li><li>没有被close的连接对象会被一直占用，那么下次继续获取连接对象，是不会获取到这个对象的</li><li>对于conn1对象指向别的东西，原始情况下jvm会回收conn1之前指向的对象，但是连接池中的连接默认有一个变量指着，所以不会被回收</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zylai.jdbc;<br><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSource;<br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidPooledConnection;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Zhao YunLai</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2022/06/22/14:13</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo02Druid</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br><br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br><br>        dataSource.setDriverClassName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>        dataSource.setUrl(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/fruitdb?&amp;useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8&quot;</span>);<br>        dataSource.setUsername(<span class="hljs-string">&quot;root&quot;</span>);<br>        dataSource.setPassword(<span class="hljs-string">&quot;root&quot;</span>);<br><br><span class="hljs-comment">//        证明两点：</span><br><span class="hljs-comment">//        1.被close的连接对象并没有真正关闭，而是将状态重新设置为空闲状态放回池子</span><br><span class="hljs-comment">//        2.没有被close的连接对象会被一直占用，那么下次继续获取连接对象，是不会获取到这个对象的</span><br><span class="hljs-comment">//        对于conn1对象指向别的东西，原始情况下jvm会回收conn1之前指向的对象，但是连接池中的连接默认有一个变量指着，所以不会被回收</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            <span class="hljs-type">Connection</span> <span class="hljs-variable">conn1</span> <span class="hljs-operator">=</span> dataSource.getConnection();<br>            <span class="hljs-type">Connection</span> <span class="hljs-variable">conn2</span> <span class="hljs-operator">=</span> dataSource.getConnection();<br><br>            System.out.println(conn1);<br>            System.out.println(conn2);<br><br>            <span class="hljs-keyword">if</span>(i%<span class="hljs-number">3</span>==<span class="hljs-number">0</span>)&#123;<br>                conn1.close();<br>                conn2.close();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-2-2-验证连接池的部分参数"><a href="#3-2-2-验证连接池的部分参数" class="headerlink" title="3.2.2 验证连接池的部分参数"></a>3.2.2 验证连接池的部分参数</h4><p>这里以最大连接数和最长等待时间为例，当获取完所有的连接之后，再去获取连接超过指定的等待时间会抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zylai.jdbc;<br><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSource;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Zhao YunLai</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2022/06/22/14:13</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: 验证连接池的部分参数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo03Druid</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br><br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br><br>        dataSource.setDriverClassName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>        dataSource.setUrl(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/fruitdb?&amp;useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8&quot;</span>);<br>        dataSource.setUsername(<span class="hljs-string">&quot;root&quot;</span>);<br>        dataSource.setPassword(<span class="hljs-string">&quot;root&quot;</span>);<br><br>        dataSource.setInitialSize(<span class="hljs-number">2</span>);<br>        dataSource.setMaxActive(<span class="hljs-number">5</span>);<br>        dataSource.setMaxWait(<span class="hljs-number">5000</span>);<br><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-type">Connection</span> <span class="hljs-variable">conn1</span> <span class="hljs-operator">=</span> dataSource.getConnection();<br><br>            System.out.println(i+<span class="hljs-string">&quot; &quot;</span>+conn1);<br><br>        &#125;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/image-20220622185437122.png" alt="image-20220622185437122"></p><h4 id="3-2-3-读取配置文件信息创建连接池"><a href="#3-2-3-读取配置文件信息创建连接池" class="headerlink" title="3.2.3 读取配置文件信息创建连接池"></a>3.2.3 读取配置文件信息创建连接池</h4><p>在实际开发中，比如数据库url，密码用户等信息都是写在配置文件中，不会直接写在代码中进行硬编码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zylai.jdbc;<br><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSource;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Zhao YunLai</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2022/06/22/14:13</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: 从配置文件中读取信息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo04Druid</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> SQLException, IOException &#123;<br><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> Demo04Druid.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;jdbc.properties&quot;</span>);<br>        properties.load(is);<br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br><br>        dataSource.setDriverClassName(properties.getProperty(<span class="hljs-string">&quot;jdbc.driverClassName&quot;</span>));<br>        dataSource.setUrl(properties.getProperty(<span class="hljs-string">&quot;jdbc.url&quot;</span>));<br>        dataSource.setUsername(properties.getProperty(<span class="hljs-string">&quot;jdbc.username&quot;</span>));<br>        dataSource.setPassword(properties.getProperty(<span class="hljs-string">&quot;jdbc.pwd&quot;</span>));<br><br>        dataSource.setInitialSize(Integer.parseInt(properties.getProperty(<span class="hljs-string">&quot;druid.initialSize&quot;</span>)));<br>        dataSource.setMaxActive(Integer.parseInt(properties.getProperty(<span class="hljs-string">&quot;druid.maxActive&quot;</span>)));<br>        dataSource.setMaxWait(Long.parseLong(properties.getProperty(<span class="hljs-string">&quot;druid.maxWait&quot;</span>)));<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-type">Connection</span> <span class="hljs-variable">conn1</span> <span class="hljs-operator">=</span> dataSource.getConnection();<br>            System.out.println(i+<span class="hljs-string">&quot; &quot;</span>+conn1);<br>        &#125;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>配置文件jdbc.properties:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">jdbc.driverClassName</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">jdbc.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/fruitdb?&amp;useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8</span><br><span class="hljs-attr">jdbc.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">jdbc.pwd</span>=<span class="hljs-string">root</span><br><br><span class="hljs-attr">druid.initialSize</span>=<span class="hljs-string">2</span><br><span class="hljs-attr">druid.maxActive</span>=<span class="hljs-string">5</span><br><span class="hljs-attr">druid.maxWait</span>=<span class="hljs-string">5000</span><br></code></pre></td></tr></table></figure><h4 id="3-2-4-直接通过配置文件建立连接池"><a href="#3-2-4-直接通过配置文件建立连接池" class="headerlink" title="3.2.4 直接通过配置文件建立连接池"></a>3.2.4 直接通过配置文件建立连接池</h4><p>通过<code>DruidDataSourceFactory.createDataSource(properties);</code>返回<strong><code>DataSource</code>接口</strong>，直接通过配置文件建立好了连接池。不过这里对于配置文件的格式有要求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zylai.jdbc;<br><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSource;<br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Zhao YunLai</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2022/06/22/14:13</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: 直接通过配置文件创建连接池</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo05Druid</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> Demo05Druid.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;jdbc2.properties&quot;</span>);<br>        properties.load(is);<br><br>        <span class="hljs-type">DataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> DruidDataSourceFactory.createDataSource(properties);<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-type">Connection</span> <span class="hljs-variable">conn1</span> <span class="hljs-operator">=</span> dataSource.getConnection();<br>            System.out.println(i+<span class="hljs-string">&quot; &quot;</span>+conn1);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>配置文件的格式应该一致</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">driverClassName</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/fruitdb?&amp;useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8</span><br><span class="hljs-attr">username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">password</span>=<span class="hljs-string">root</span><br><br><span class="hljs-attr">initialSize</span>=<span class="hljs-string">2</span><br><span class="hljs-attr">maxActive</span>=<span class="hljs-string">5</span><br><span class="hljs-attr">maxWait</span>=<span class="hljs-string">5000</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>javaSE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【cs231n】详解反向传播</title>
    <link href="/posts/f85ca0cabe92/"/>
    <url>/posts/f85ca0cabe92/</url>
    
    <content type="html"><![CDATA[<h3 id="计算图"><a href="#计算图" class="headerlink" title="计算图"></a>计算图</h3><p>定义：使用计算图来表示任意函数，其中图的节点表示我们要执行的每一步计算。</p><p>好处：使用计算图来表示一个函数，就能使用反向传播技术递归地调用链式法则来计算一下计算图中每个变量的梯度。当涉及到非常复杂的函数时，这种方法非常有用。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>对于函数$f(x,y,z) = (x+y)z$,其中x=-2,y=5,z=-4</p><ol><li>用计算图表示整个函数</li><li>向前传播计算中间变量的梯度</li><li>从后往前，根据链式法则和向前传播得到的中间梯度计算梯度</li></ol><p>链式法则，比如计算$\dfrac{\partial f}{\partial y} =   \dfrac{\partial f}{\partial q}\dfrac{\partial q}{\partial y}$，由于f和y没有直接的关系，但是可以利用链式法则，通过q得到结果。</p><blockquote><p>图中绿色的值是传入的参数值和计算图向前计算得到的值，红色值是利用计算图反向计算时得到的<strong>梯度值</strong></p></blockquote><p><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/image-20220501154051651.png" alt="image-20220501154051651"></p><h3 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h3><p>对于一个节点，计算本地梯度并存储跟踪下来，在反向传播过程中接收从上游传过来的梯度值，然后直接利用这个值乘以本地梯度就可以得到连接点的梯度值，就可以将连接点的结果传入前面的节点，那么在下一个节点进行传播时，不用考虑除了直接相连的节点之外的任何东西。</p><p>例如这个图中，x和y是前面的节点传入该节点的值，z是节点的输出值，进行反向传播时，从输出方向传入上游的梯度值，我们只需要将在向前传播过程中计算好的梯度值（即本地梯度）和从上游传过来的梯度值利用<strong>链式法则</strong>相乘即可得到我们想要的结果，再将这个结果传入到前面的直接相连的节点中去。</p><p><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/image-20220501155750378.png" alt="image-20220501155750378"></p><h3 id="详细的计算过程例子"><a href="#详细的计算过程例子" class="headerlink" title="详细的计算过程例子"></a>详细的计算过程例子</h3><p>第一步：画出计算图并向前传播计算，写下中间的一些微分方程式</p><p><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/image-20220501160447744.png" alt="image-20220501160447744"></p><p>第二步：从末端开始进行反向传播</p><p>对于节点<code>1/x</code></p><p>其中df/df等于1，然后进行节点1/x的计算，上游传过来的梯度值为1，该节点的本地梯度利用向前传播时记录下来的微积分公式和参数值即可求得，本地梯度为$\dfrac{df}{dx}=\dfrac{-1}{x^2}$，x的值为1.37，那么计算出本地梯度值为-0.53，再与上游的值1利用链式法则相乘即可得到最终值为-0.53。</p><p><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/image-20220501161951776.png" alt="image-20220501161951776"></p><p>之后的节点执行相同的操作即可</p><p>节点<code>+1</code>：</p><ul><li>上游值：-0.53</li><li>本地梯度表达式：$f(x) = x+c \rightarrow  \dfrac{df}{dx}=1$</li><li>本地梯度值为：1</li><li>利用链式法则求得最终值为：-0.53</li><li><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/image-20220501162006790.png" alt="image-20220501162006790"></li></ul><p>节点<code>exp</code>：</p><ul><li>上游值：-0.53</li><li>本地梯度表达式：$f(x) = e^x\rightarrow  \dfrac{df}{dx}=e^x$</li><li>本地梯度值为：$e^{-1}$</li><li>利用链式法则求得最终值为：$(e^{-1})(-0.53) = -0.20$</li><li><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/image-20220501162036084.png" alt="image-20220501162036084"></li></ul><p>节点<code>*-1</code>：</p><ul><li>上游值：-0.20</li><li>本地梯度表达式：$f(x) = ax\rightarrow  \dfrac{df}{dx}=a$</li><li>本地梯度值为：$-1$</li><li>利用链式法则求得最终值为：-1*(-0.2) = 0.20</li><li><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/image-20220501162055742.png" alt="image-20220501162055742.png"></li></ul><p>节点<code>+</code>:</p><ul><li>上游值：0.20</li><li>本地梯度表达式：$f(x)=x+y \rightarrow \dfrac{\partial f}{\partial x}=1$</li><li>本地梯度值：1</li><li>利用链式法则求得最终值为：0.20</li><li><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/image-20220501162910821.png" alt="image-20220501162910821"></li></ul><p>节点<code>*</code>:</p><ul><li>上游值：0.20</li><li>本地梯度表达式：$f(x)=xy \rightarrow \dfrac{\partial f}{\partial x}=y$</li><li>本地梯度值：对于w0，本地梯度值为x0(-1)，对于x0，本地梯度值为w0（2）</li><li>利用链式法则求得最终值为：w0为-0.20，x0为0.40</li><li><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/image-20220501163217220.png" alt="image-20220501163217220"></li></ul><p>我们可以将计算图中几个简单地节点用一个大的节点替换掉。</p><p><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/image-20220501165003673.png" alt="image-20220501165003673"></p><p>你可以去聚合你想要的任何节点去组成稍微复杂一点的节点，只要你能写出他的本地梯度，这是一个权衡问题，一个是数学计算的计算图有多么简单，另一个是每个梯度计算时有多简单。</p><h3 id="特殊的节点"><a href="#特殊的节点" class="headerlink" title="特殊的节点"></a>特殊的节点</h3><ul><li>加法节点：本地梯度都为1</li><li>max节点：本地梯度一个为1，一个为0</li><li>乘法节点：本地梯度相当于交换了x和y的值</li><li><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/image-20220501171149868.png" alt="image-20220501171149868"></li></ul><p>一个结点有多个后继节点，在反向传播时，根据链式法则进行累加即可。$\dfrac{\partial f}{\partial x}=\sum_i\dfrac{\partial f}{\partial  q_i}\dfrac{ {\partial q_i} }{\partial x}$</p><h3 id="高纬向量"><a href="#高纬向量" class="headerlink" title="高纬向量"></a>高纬向量</h3><h4 id="雅克比矩阵"><a href="#雅克比矩阵" class="headerlink" title="雅克比矩阵"></a>雅克比矩阵</h4><blockquote><p>高等数学3和线性代数的一些知识</p></blockquote><p>雅克比矩阵是函数的一阶偏导数以一定方式排列成的矩阵，其行列式称为雅克比行列式。雅克比矩阵每一行都是偏导数，矩阵中的每一个元素都是输出向量的每个元素对输入向量每个元素分别求偏导的结果</p><script type="math/tex; mode=display">J = \dfrac {\partial(F,G)} {\partial(u,v)}=\begin{vmatrix} \dfrac{\partial F} {\partial u} & \dfrac{\partial F} {\partial v} \\ \dfrac{\partial G} {\partial u} & \dfrac{\partial G} {\partial v} \\\end{vmatrix}</script><p>其实计算流程还是一模一样的，只是刚才的梯度变成了雅克比矩阵，就是包含了变量中每个元素导数的矩阵，比如z在每个x元素方向上的梯度。</p><p>维度的问题</p><p>对于一个4096维向量输入和一个4096维向量输出，所需要的雅克比矩阵的大小为4096<em>4096，实际中我们进行小批量处理，那么就意味着这个矩阵将会更大，比如一次进行100个样本的处理，那么雅克比矩阵就会变成409600 </em> 409600。如果这样的话，将会计算很慢，甚至说不可计算。</p><p><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/image-20220501193839752.png" alt="image-20220501193839752"></p><p>由于输入的第一个元素之和输出的第一个元素有关系，所以实际上我们算出的雅克比矩阵是一个对角矩阵，所以不需要把整个矩阵都算出来。</p><p>向量的梯度总是和向量保持着一样的大小</p><h4 id="计算过程"><a href="#计算过程" class="headerlink" title="计算过程"></a>计算过程</h4><p>W是2 * 2，x是2维的向量</p><p>第一步：写出计算图且向前传播计算</p><p><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/image-20220501194154108.png" alt="image-20220501194154108"></p><p>第二步：进行反向传播</p><p>节点<code>L2</code>：</p><ul><li>上游值：1</li><li>本地梯度：q是一个二维的向量，对于每一维的qi，$\dfrac{\partial f}{\partial q_i}= 2q_i,即 \nabla f = 2q$</li><li>本地梯度值：$\begin{vmatrix}<br>0.22 \<br>0.26 \<br>\end{vmatrix}$</li><li>利用链式法则求得最终梯度值：$\begin{vmatrix}<br>0.44 \<br>0.52 \<br>\end{vmatrix}$</li><li><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/image-20220501195729067.png" alt="image-20220501195729067"></li></ul><p>节点<code>*</code>：</p><p>比如对于q的第一个元素q1，他和W的第一个元素W1,1有什么关系呢？q的第一个元素为$W<em>{1,1}x_1+W</em>{1,2}x2$，很容易看出，q1对于W1,1的导数为x1。推广到一般的情况，就有<script type="math/tex">\dfrac{\partial q_k}{\partial W_{i,j}} = 1_{k=i}x_j</script>。利用这个公式对W中的每一个元素都进行计算，可以得到关于W的梯度，一定是<strong>和W形状相同的</strong>。</p><p>注意：就是变量梯度的向量大小和变量向量大小一致，在实际中这是非常有用的完整性检查，每个梯度的元素量化了每个元素对最终输出影响的贡献</p><ul><li>上游值：$\begin{vmatrix}<br>0.44 \<br>0.52 \<br>\end{vmatrix}$</li><li>本地梯度：<script type="math/tex">\dfrac{\partial q_k}{\partial W_{i,j}} = 1_{k=i}x_j</script>​，对于W中的每一个元素都使用这个公式计算既可得到本地梯度值$\begin{vmatrix}<br>0.2 &amp; 0.4\<br>0.2 &amp; 0.4\<br>\end{vmatrix}$</li><li>最终梯度值：对每个元素进行单独操作，第一行的元素乘以上游值第一行…这样依次下去就能算出最终的值</li></ul><p>其实对于函数$f(q)=||q||^2=q_1^2+…+q_n^2$，我们也可以利用链式法则可以求出f对于W的偏导数，见下图的推导。图中的q是向前传播的中间变量值。</p><p><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/image-20220501211933279.png" alt="image-20220501211933279"></p><p>同理，如此计算出x的梯度即可</p><p><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/image-20220501212509682.png" alt="image-20220501212509682"></p>]]></content>
    
    
    <categories>
      
      <category>cs231n</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
      <tag>计算机视觉</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【cs231n】损失函数和梯度下降优化</title>
    <link href="/posts/eded7a23d48f/"/>
    <url>/posts/eded7a23d48f/</url>
    
    <content type="html"><![CDATA[<h2 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h2><p>如何确定W，如何利用训练数据得到好的W。</p><p><strong>损失函数</strong>：定义一个函数，输入W，然后定量计算W的好坏。</p><h3 id="支持向量机SVM"><a href="#支持向量机SVM" class="headerlink" title="支持向量机SVM"></a>支持向量机SVM</h3><p>给定一个样本$(x<em>i,y_i)$，其中$x_i$是图片，$y_i$是图片真实对应的标签，就是第几类，i代表是训练集第i个样本。用支持向量机表示为：$$L_i = \sum</em>{j\neq y<em>i}max(0,s_j-s</em>{y_i}+1)$$，S为这张图片通过分类器计算出来的各个类的得分。</p><p>这个式子也表示了如果真实的类的分数比其他类的分数大于1以上，那么这一项的损失就为0。那么为什么要选择大于1呢？其实1是可以任意确定的一个常数，我们并不关心损失函数中的分数的绝对值，而是关心分数的绝对差值，保证分类正确的分数要远远大于分类不正确的分数。因此这个常数项1就不是很重要，如果把W进行放大和缩小，那么每个分数也会放大和缩小，这个常数会消失。</p><p>例子：</p><p><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/image-20220424153133348.png" alt="image-20220424153133348"></p><p>分别计算每个样本的损失值，求平均数。<script type="math/tex">L = \dfrac{1}{N}\sum^N_{i=1}L_i</script>  这个值就反映了当前我们的分类器在数据集上的分类效果。</p><ul><li>如果汽车的分类分数变化了一丢丢，那么损失函数的值会变化吗？</li><li>不会，如果汽车的分数仍然比其他的类别的分数都大于1，那么损失函数的值还是0</li><li>损失函数的最大值和最小值是多少？</li><li>最小值为0，即所有样本的正确类别的分数都比其他类别的分数要大很多，最大值可能一个无穷大。</li><li>如果初始的W很小均匀分布，所有的S都为0，那么一个样本的损失函数值是多少？</li><li>答案为分类的个数-1，因为正确的类别为0，其他n-1个不正确的类别值为1</li><li>如果我们计算损失的时候，将正确的类别也加上了（即加上了j=$y_i$的情况），那么损失函数如何变化？</li><li>结果多了1</li><li>如果计算样本的损失值时，不是求和而是求平均值呢？</li><li>不会变化</li><li>如果损失值上加上平方，分类会如何变化？</li><li>会变成另外一种损失函数，从线性的变成了非线性的了</li></ul><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">L_i_vectorized</span>(<span class="hljs-params">x,y,W</span>):<br>    scores = W.dot(x)<br>    margins = np.maximum(<span class="hljs-number">0</span>,scores - scores[y] + <span class="hljs-number">1</span>)<br>    margins[y] = <span class="hljs-number">0</span><br>    loss_i = np.<span class="hljs-built_in">sum</span>(margins)<br>    <span class="hljs-keyword">return</span> loss_i<br></code></pre></td></tr></table></figure><h3 id="正则化"><a href="#正则化" class="headerlink" title="正则化"></a>正则化</h3><p>如果找到一个损失值为0的W，我们应该使用吗？</p><p>其实我们并关心函数在训练数据集上拟合的怎么样，我们更关心在测试数据集上的表现。如果告诉分类器你唯一的目标就是去拟合训练数据集，分类器去尽力拟合训练的数据，甚至达到很完美的地步，这其实是很糟糕的情况。因为此时如果加入一些新的数据进来，那么这个拟合曲线就很难拟合这些新的点。<strong>因此我们更加希望，分类器是那个绿色的线而非蓝色的完全拟合所有训练数据的线</strong></p><p>添加正则项R(W)，鼓励模型以某种方式选择更简单的W，这里的简约取决于任务的规模和模型的种类。体现了<a href="https://baike.baidu.com/item/%E5%A5%A5%E5%8D%A1%E5%A7%86%E5%89%83%E5%88%80%E5%8E%9F%E7%90%86"><strong>奥卡姆剃刀理论</strong></a>：如果你有多个可以解释你观察结果的假设，一般来讲，你应该选择最简约的，因为这样可以在未来将其用于解释新的观察结果。</p><p><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/image-20220424163038352.png" alt="image-20220424163038352"></p><p>使用超参数$\lambda$来平衡损失函数中的数据损失项和正则项。</p><p>正则化的主要目的就是<strong>减轻模型的复杂度，而不是去视图拟合数据</strong>。</p><h4 id="常用的正则化函数"><a href="#常用的正则化函数" class="headerlink" title="常用的正则化函数"></a>常用的正则化函数</h4><p>最常用的就是L2正则化 ，L2，$\sum<em>k\sum_lW</em>{k,l}^2$</p><h3 id="多项逻辑斯蒂回归（softmax）"><a href="#多项逻辑斯蒂回归（softmax）" class="headerlink" title="多项逻辑斯蒂回归（softmax）"></a>多项逻辑斯蒂回归（softmax）</h3><p>在SVM中，我们并没有过多的关注得分，只是想要真实的正确类别的分数要比不正确的分类得分要高才好。并没有解释这些分数的真实含义，在softmax中将对这些得分进行一些计算以便得到分数的概率分布。</p><p>公式为  <script type="math/tex">L_i = -log(\dfrac{e^{s_{y_i}}}{\sum_je^{s_j}})</script>,其中i为第i个样本，$ y_i $表示正确的类别，S为各个类别的分数</p><p>流程：</p><ol><li>将得分进行指数运算</li><li>进行归一化处理</li><li>计算正确类别的损失，我们使用log进行运算，log是单调函数，加上负号就和我们想要的意思一致</li></ol><p><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/image-20220427204759488.png" alt="image-20220427204759488"></p><p>下面是几个问题</p><ul><li>softmax的最大值和最小值</li><li>最小值：0，最大值：无穷。正确类别的概率为1取最小值，概率为0取最大值。实际中不可能取到，因为只有分数为无穷时才有可能</li><li>比较SVM和softmax这两个函数，如果我将正确的分类的分数提高一点，那么会对函数的结果有什么影响</li><li>我们已经分析过，对于SVM没有影响。但是对于softmax是会改变结果的，因为softmax是将所有的分数进行一个概率分布，如果正确的分类的分数提高，那么他在概率分布中占比就更大。这两种函数的策略有些不同，SVM是要求正确的分类分数比不正确的大于一个边界值就可以了，就不去管他了，而softmax是试着不断去提高正确分类的概率质量，并把不正确的分值降低。实际中这两个函数的差异不会造成很大的影响。</li></ul><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>我们已经通过数据集利用线性分类器计算出得分，并根据得分和数据真实的分类利用损失函数计算出损失值，通常会增加正则化操作，试图在训练数据之间进行权衡。那么下一步就是如何优化W，如何使W损失最小化？</p><p><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/image-20220430214906337.png" alt="image-20220430214906337"></p><p> 实践中，我们使用不同的迭代方法进行优化</p><p>最简单粗暴的想法可能就是随机搜索，就是盲搜，这是一个很烂的算法，这里不多介绍。</p><h3 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h3><p>比如说我们在山顶，要以最快的速度下山，我们可以每一次都沿着最陡峭的方向走一步，这样一直走到山底。在数学中，我们可以用梯度这个概念来表示最陡的方向，梯度指向函数增加最快的方向，负梯度就是函数减小最快的方向。</p><p><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/image-20220430224651448.png" alt="image-20220430224651448"></p><p>对于多元的情况，这个时候我们需要求的东西扩展成每个方向的『偏导数』，然后把它们合在一块组成梯度向量。</p><p><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/20180424120509810.jpeg" alt="演示图片"></p><h3 id="计算梯度"><a href="#计算梯度" class="headerlink" title="计算梯度"></a>计算梯度</h3><h4 id="数值梯度"><a href="#数值梯度" class="headerlink" title="数值梯度"></a>数值梯度</h4><p>从定义上来算，也叫有限差分法，就是对于每一个维度在原始数值上加上一个很小的h，然后求出这个维度上的偏导，最后组合在一起得到梯度grad</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">eval_numerical_gradient</span>(<span class="hljs-params">f, x</span>):<br>  <span class="hljs-string">&quot;&quot;&quot; </span><br><span class="hljs-string">  一个最基本的计算x点上f的梯度的算法 </span><br><span class="hljs-string">  - f 为参数为x的函数</span><br><span class="hljs-string">  - x 是一个numpy的vector</span><br><span class="hljs-string">  &quot;&quot;&quot;</span> <br><br>  fx = f(x) <span class="hljs-comment"># 计算原始点上函数值</span><br>  grad = np.zeros(x.shape)<br>  h = <span class="hljs-number">0.00001</span><br><br>  <span class="hljs-comment"># 对x的每个维度都计算一遍</span><br>  it = np.nditer(x, flags=[<span class="hljs-string">&#x27;multi_index&#x27;</span>], op_flags=[<span class="hljs-string">&#x27;readwrite&#x27;</span>])<br>  <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> it.finished:<br><br>    <span class="hljs-comment"># 计算x+h处的函数值</span><br>    ix = it.multi_index<br>    old_value = x[ix]<br>    x[ix] = old_value + h <span class="hljs-comment"># 加h</span><br>    fxh = f(x) <span class="hljs-comment"># 计算f(x + h)</span><br>    x[ix] = old_value <span class="hljs-comment"># 存储之前的函数值</span><br><br>    <span class="hljs-comment"># 计算偏导数</span><br>    grad[ix] = (fxh - fx) / h <span class="hljs-comment"># 斜率</span><br>    it.iternext() <span class="hljs-comment"># 开始下一个维度上的偏导计算</span><br><br>  <span class="hljs-keyword">return</span> grad<br></code></pre></td></tr></table></figure><p>实际计算中，这个方法的问题很大。最突出的就是效率问题，比如在我们的CIFAR-10例子中，我们总共有30730个参数，因此我们单次迭代总共就需要计算30730次损失函数。这个问题在之后会提到的神经网络中更为严重，很可能两层神经元之间就有百万级别的参数权重，很低下</p><h4 id="解析梯度"><a href="#解析梯度" class="headerlink" title="解析梯度"></a>解析梯度</h4><p><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/image-20220430230617836.png" alt="image-20220430230617836"></p><p>直接使用微积分的知识，<strong>写下梯度的表达式，这里梯度的表达式就是每个参数的偏导数</strong>，每次计算只需要带入公式即可。从W开始，计算dW或每一步的梯度。</p><p>实际中，我们不会直接使用数值梯度的方法，但是我们可以使用数值梯度的方法来验证解析梯度的准确性。</p><p>再举一个小例子（这里的反向传播法暂时不介绍）：对于函数$f(x,y,z)=(x+y)z$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># first method   解析法</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">grad1</span>(<span class="hljs-params">x,y,z</span>):<br>    dx = z<br>    dy = z<br>    dz = (x+y)<br>    <span class="hljs-keyword">return</span> (dx,dy,dz)<br><span class="hljs-comment"># second method  数值法</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">grad2</span>(<span class="hljs-params">x,y,z,epi</span>): <br>    <span class="hljs-comment"># dx</span><br>    fx1 = (x+epi+y)*z<br>    fx2 = (x-epi+y)*z<br>    dx = (fx1-fx2)/(<span class="hljs-number">2</span>*epi)<br>    <span class="hljs-comment"># dy</span><br>    fy1 = (x+y+epi)*z<br>    fy2 = (x+y-epi)*z<br>    dy = (fy1-fy2)/(<span class="hljs-number">2</span>*epi)<br>    <span class="hljs-comment"># dz</span><br>    fz1 = (x+y)*(z+epi)<br>    fz2 = (x+y)*(z-epi)<br>    dz = (fz1-fz2)/(<span class="hljs-number">2</span>*epi)<br>    <span class="hljs-keyword">return</span> (dx,dy,dz)<br><span class="hljs-comment"># third method 反向传播法</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">grad3</span>(<span class="hljs-params">x,y,z</span>): <br>    <span class="hljs-comment"># forward</span><br>    p = x+y;<br>    f = p*z;    <br>    <span class="hljs-comment"># backward</span><br>    dp = z<br>    dz = p<br>    dx = <span class="hljs-number">1</span> * dp<br>    dy = <span class="hljs-number">1</span> * dp<br>    <span class="hljs-keyword">return</span> (dx,dy,dz)<br> <br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;&lt;df/dx,df/dy,df/dz&gt;: %.2f %.2f %.2f&quot;</span>%(grad1(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)))       <br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;&lt;df/dx,df/dy,df/dz&gt;: %.2f %.2f %.2f&quot;</span>%(grad2(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1e-5</span>)))<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;&lt;df/dx,df/dy,df/dz&gt;: %.2f %.2f %.2f&quot;</span>%(grad3(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)))<br></code></pre></td></tr></table></figure><p><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/20190224222544885.png" alt="result"></p><h3 id="梯度下降过程"><a href="#梯度下降过程" class="headerlink" title="梯度下降过程"></a>梯度下降过程</h3><p>在梯度下降算法中，首先我们初始化W为随机值，当为真时，我们计算损失和梯度，然后向着梯度相反的方向更新权重W值。</p><p>每次更新的<strong>步长</strong>是一个超参数，又叫学习率，就相当于每次选择最陡峭的方向走一步，这一步走多长。</p><p>其实在每次走一步时，会有很多种比较高级一点更新的法则，其本质就是梯度下降，每一步都试着朝着下坡走，这个后面详细讨论。</p><h3 id="小批量随机下降"><a href="#小批量随机下降" class="headerlink" title="小批量随机下降"></a>小批量随机下降</h3><p>每次迭代时并不会去选择所有的数据集，这样的成本会很高，速度很慢。</p><p>随机梯度下降，每次迭代时，并不选择全部的样本，而是随机选择小部分的样本（minibatch），一般为2的次幂，利用小批量的数据来估计误差总和以及实际梯度</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://blog.csdn.net/jiaoyangwm/article/details/80062803">深度学习与计算机视觉（三）最优化与梯度下降</a></li><li><a href="https://blog.csdn.net/ningyanggege/article/details/87908988">计算梯度的三种方法： 数值法，解析法，反向传播法</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>cs231n</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
      <tag>计算机视觉</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【cs231n】图像分类 K最邻近算法 线性分类器</title>
    <link href="/posts/d3707446a18f/"/>
    <url>/posts/d3707446a18f/</url>
    
    <content type="html"><![CDATA[<h3 id="图像分类遇到的问题"><a href="#图像分类遇到的问题" class="headerlink" title="图像分类遇到的问题"></a>图像分类遇到的问题</h3><ul><li>semantic gap  语义鸿沟，人看到的是一张图片，但是计算机看到的是数字矩阵</li><li>viewpoint variation    视角不同，看到的内容不同</li><li>Illumination   照明问题</li><li>Deformation   变形问题</li><li>Occlusion  遮挡问题</li><li>Background Clutter 比如猫身上的条纹和背景很像</li><li>Intraclass variation 类内差异问题，猫有不同的大小颜色等</li></ul><p>很难直接写出一个代码来判断他是什么对象</p><p><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/image-20220424130422953.png" alt="image-20220424130422953"></p><h3 id="数据驱动的方法"><a href="#数据驱动的方法" class="headerlink" title="数据驱动的方法"></a>数据驱动的方法</h3><ol><li>收集图片的数据集</li><li>使用机器学习的方法训练一个分类器</li><li>在新的图片上来评价这个分类器</li></ol><h3 id="K-最近邻算法分类"><a href="#K-最近邻算法分类" class="headerlink" title="K-最近邻算法分类"></a>K-最近邻算法分类</h3><p>通过比较图像之间的差异进行分类，通过像素进行比较差异。</p><p>首先通过训练函数只是简单地所有的训练数据都记忆下来，每次输入一张图片进行预测时，将遍历已经记忆的训练数据找到最相近的图片，根据最相近的图片的类别来预测这个输入图片的类别。</p><p><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/image-20220424120101855.png" alt="image-20220424120101855"></p><p>训练的复杂度：O(1)</p><p>预测的复杂度：O(N)</p><p>这是很坏的一个结果，因为在训练时这个算法很快，但是真正进行预测时很慢，这和我们的初衷完全相反。</p><h4 id="K最邻近"><a href="#K最邻近" class="headerlink" title="K最邻近"></a>K最邻近</h4><p>如果只计算最邻近一个图片，会有弊端，比如下图，绿色分区中单独有一个黄色的点，因为只计算最近的那个点，所以那一片就会选择黄色的点。</p><p>所以K最邻近算法是找到最近的K的点，然后在这些邻近点中进行投票，然后这些票数多的临近点预测出结果，实现这个算法的方式有很多，比如将距离进行加权，但是最简单的还是进行多数投票，临近点中哪个类别最多就确定为哪个类别。</p><p><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/image-20220424115725935.png" alt="image-20220424115725935"></p><p>当k=3时，图中的黄色噪点不会导致周围的区域划分为黄色了，决策边界也将随着K的增加而被平滑掉。图中的白色区域代表在这个区域中没有临近点，即没有进行分类。</p><h4 id="衡量距离的两种函数"><a href="#衡量距离的两种函数" class="headerlink" title="衡量距离的两种函数"></a>衡量距离的两种函数</h4><p>曼哈顿距离（L1)和欧氏距离（L2) </p><p>L1距离取决于选取的坐标轴，如果你旋转坐标轴，那么L1距离可能改变，但是L2距离不会改变。所以，如果你输入的向量值有一部分有一些重要的意义，那么L1可能更合适，如果只是空间中的通用向量，没有什么意义，那么L2可能更自然一些。</p><p><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/image-20220424113636191.png" alt="image-20220424113636191"></p><h4 id="超参数的确定"><a href="#超参数的确定" class="headerlink" title="超参数的确定"></a>超参数的确定</h4><p>超参数：K和距离测量方式</p><p>q：什么时候L1比L2好？</p><p>a：需要根据实际问题来看，最佳的方法时两种都尝试一下</p><p>错误的确定方法：</p><ol><li>不区分测试集和训练集，总体进行训练选择表现最好的超参数</li><li>训练之后，在测试集上使用，调参，选取在测试集上表现最好的超参数。坏处：遇到一组新的数据可能不行</li></ol><p>正确的做法：</p><p>分成三份，训练、验证、测试。在验证数据集上选择合适的超参数，测试数据集最后才能使用</p><p><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/image-20220421204006068.png" alt="image-20220421204006068"></p><p>或者使用交叉验证，但是这种方法在深度学习中不是很常用，因为训练数据本身就是很费资源的事情，进行交叉验证需要额外多训练几次，很耗费资源</p><p>交叉验证思路就是，分出测试数据集之后的数据平均分成几份，每次选取其中一份作为验证数据集，其余的份数都用来当做训练数据集。这样训练多次，得到最优的参数</p><p><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/image-20220421204016562.png" alt="image-20220421204016562"></p><p>测试集是否可以很好地代表现实中的数据？随机将收集来的数据划分为训练集和测试集。</p><p>knn不会被使用，它的测试时间很长，使用L1或L2这种向量化的距离衡量方式不适合表示图像之间的视觉相似度，例子：</p><p>维度灾难，所需要的样本数呈指数增加</p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>在图片分类中，我们使用训练数据集，训练数据集包括图片和标签，我们需要在测试数据集上预测出图片的标签</li><li>KNN分类器预测标签基于最近的训练样例</li><li>超参数是，距离的衡量方式和K</li><li>使用验证数据集来选择超参数，仅在最后使用测试数据集测试模型</li></ul><h2 id="线性分类"><a href="#线性分类" class="headerlink" title="线性分类"></a>线性分类</h2><p>linear classification</p><h3 id="神经网络的模块化"><a href="#神经网络的模块化" class="headerlink" title="神经网络的模块化"></a>神经网络的模块化</h3><p>可以把神经网络看成乐高，你可以把不同的神经网络模块组合起来拼接成一个大型卷积网络，线性分类器是深度学习的应用中最基本的构建模块之一。</p><p>再例如，该系统输入一幅图像输出对于该图像的描述性句子，工作原理就是使用CNN关注图像处理图像，使用RNN关注语义处理语言，将这两个网络放在一起就可以组成一个很好的处理系统。</p><p><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/image-20220423214736115.png" alt="image-20220423214736115"></p><h3 id="线性分类器"><a href="#线性分类器" class="headerlink" title="线性分类器"></a>线性分类器</h3><p>思想就是将图片参数输入，与权重W相乘，可以再加上一个偏差量b（偏差给了数据独立的缩放比例以及每个类别的偏移量），得到一个列向量，每个元素都代表一个类别的得分，该图像所属类别为得分高的那个。原理如下如所示：</p><p><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/image-20220423220722353.png" alt="image-20220423220722353"></p><p>将一个32 <em> 32像素三通道的图片看成一个3072的列向量，由于类别一共有10类，那么权重W就可以设置为10 </em> 3072的矩阵，那么结果就是一个长度为10的列向量。</p><p>具体来看下面这个例子，假设一张像素为4的图片，类别有三类，整个流程如下： </p><p><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/image-20220423221042130.png" alt="image-20220423221042130"></p><p>问题来了，那个这个训练好的权重矩阵W到底和输入的图像有什么关系呢？<strong>其实可以把权重矩阵的每一行看成一个模板</strong>，我们把矩阵中每一行单独拿出来做成一个图像，在CIFAR-10中，训练好的权重矩阵W的每一行对应的图像如下图：</p><p><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/image-20220423221646455.png" alt="image-20220423221646455"></p><p>另一种解释：</p><p>也可以将每个图片都看成高维空间中的一个点，我们试图通过一条线将每个点进行分类。但是由此而来也会带来线性分类器的困境，当多模态数据出现在不同领域的空间中（比如一个类别出现在不同的领域空间中）</p><p><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/image-20220424111851604.png" alt="image-20220424111851604"></p>]]></content>
    
    
    <categories>
      
      <category>cs231n</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
      <tag>计算机视觉</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【动手学深度学习】03-感知机</title>
    <link href="/posts/fbeef9592554/"/>
    <url>/posts/fbeef9592554/</url>
    
    <content type="html"><![CDATA[<h2 id="1-感知机"><a href="#1-感知机" class="headerlink" title="1 感知机"></a>1 感知机</h2><p>给予输入，权重和偏差，然后感知机输出1或0，其实是个<code>二分类问题</code></p><p>二分类：-1或1</p><p>线性回归：输出实数</p><p>softmax回归：输出回归概率</p><p><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/image-20220217115523159.png" alt="image-20220217115523159"></p><h3 id="1-1-训练感知机"><a href="#1-1-训练感知机" class="headerlink" title="1.1 训练感知机"></a>1.1 训练感知机</h3><p>标记$y_i$有值为1和-1，分别对应着二分类中的两个类。如果$&lt; w,x_i &gt;+b$的值小于等于0，即预测的为-1对应的类，但是真实的$y_i$是1，二者相乘结果为非整数表示分类错误，就需要调整参数。</p><script type="math/tex; mode=display">-\log P(\mathbf{Y} \mid \mathbf{X}) = \sum_{i=1}^n -\log P(\mathbf{y}^{(i)} \mid \mathbf{x}^{(i)})= \sum_{i=1}^n l(\mathbf{y}^{(i)}, \hat{\mathbf{y}}^{(i)}),</script><p>停止条件：<strong>如此反复直到所有的数据都分类正确。</strong></p><p>等价于使用批量大小为1的梯度下降，每一次拿一个样本去算梯度做更新，不是随机梯度下降是因为感知机是一边又一边的去扫描数据，不是随机取值。损失函数使用max来判断是否分类正确，若正确则取值为0，常数的梯度</p><p><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/image-20220217173503976.png" alt="image-20220217173503976"></p><h3 id="1-2-例子"><a href="#1-2-例子" class="headerlink" title="1.2 例子"></a>1.2 例子</h3><p> <img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/image-20220217180730249.png" alt="image-20220217180730249"></p><h3 id="1-3-收敛定理"><a href="#1-3-收敛定理" class="headerlink" title="1.3 收敛定理"></a>1.3 收敛定理</h3><blockquote><p>暂时不做证明，证明见<a href="https://blog.csdn.net/iwangzhengchao/article/details/54486473">这里</a></p></blockquote><p><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/image-20220217180914646.png" alt="image-20220217180914646"></p><p>余量ρ使得存在一个分界面，该分界面对于所有的数据都分类正确。</p><p>r代表着数据大小，所以收敛的步数与r成正比。ρ是分界面的大小，如果分割面很大，那么就会把数据分类分的很开，就所需要的步数变少，所以步数和ρ成反比。</p><h3 id="1-4-XOR问题"><a href="#1-4-XOR问题" class="headerlink" title="1.4 XOR问题"></a>1.4 XOR问题</h3><p>他只能产生线性分割面，不能拟合XOR函数。该问题直接导致了AI的第一次寒冬。</p><p><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/image-20220217181414975-16450928641171.png" alt="image-20220217181414975"></p><h3 id="1-5-总结"><a href="#1-5-总结" class="headerlink" title="1.5 总结"></a>1.5 总结</h3><ul><li>感知机是一个二等分模型，是最早的AI模型之一</li><li>它的求解算法等价于使用批量大小为1的梯度下降</li><li>它不能拟合XOR函数，导致的第一次AI寒冬</li></ul><h2 id="2-多层感知机"><a href="#2-多层感知机" class="headerlink" title="2 多层感知机"></a>2 多层感知机</h2><h3 id="2-1-解决XOR问题"><a href="#2-1-解决XOR问题" class="headerlink" title="2.1 解决XOR问题"></a>2.1 解决XOR问题</h3><p>解决XOR问题，单线性模型是不行的，所以使用多层。蓝色的线根据x轴坐标分类，黄色的线根据y轴的坐标分类，之后再把蓝色和黄色的分类结果相乘即可得到正确的分类结果。即如果一个函数解决不了，那就先用几个简单地函数来解决，之后再对简单的函数进行分类解决。</p><p><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/image-20220217160050472.png" alt="image-20220217160050472"></p><h3 id="2-2-单隐藏层"><a href="#2-2-单隐藏层" class="headerlink" title="2.2 单隐藏层"></a>2.2 单隐藏层</h3><p>隐藏层的大小是超参数。原因：输入的大小是不能改的，输出的大小取决于要分多少类，唯一能够设置的就是超参数的大小。</p><h4 id="2-2-1-单类分类"><a href="#2-2-1-单类分类" class="headerlink" title="2.2.1 单类分类"></a>2.2.1 单类分类</h4><p>输入：一个n维向量。隐藏层：$W_1$是一个m*n的矩阵，偏移是一个m维的向量。输出层：为一个m维的向量，有多少个分类，就是多少维。</p><p><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/image-20220217162751684.png" alt="image-20220217162751684"></p><h4 id="2-2-2-激活函数"><a href="#2-2-2-激活函数" class="headerlink" title="2.2.2 激活函数"></a>2.2.2 激活函数</h4><p>函数σ的结果是一个m<em>n的矩阵，该结果作为输入数据到输出层中，再经过输出层的运算得到结果。如果σ是线性的（比如σ=a<em>*x</em></em>）那么输出层结果是一个线性函数，等价于一个单层的感知机。</p><p>sigmoid激活函数：</p><p><strong>就是把σ给软化了</strong></p><p><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/image-20220217164324889.png" alt="image-20220217164324889"></p><p>Tanh激活函数：</p><p><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/image-20220217164426432.png" alt="image-20220217164426432"></p><p>ReLU激活函数：</p><p>rectified linear unit，其实就是一个max而已，主要的好处就是算起来很快，不需要做指数运算。</p><blockquote><p>指数运算是一个很贵的事情，在cpu上一次指数运算可能相当于上百次乘法运算，在GPU上好一点，但是还是很贵</p></blockquote><p><img src="【动手学深度学习】03-感知机.assets/image-20220217164855396.png" alt="image-20220217164855396"></p><h4 id="2-2-3-多类分类"><a href="#2-2-3-多类分类" class="headerlink" title="2.2.3 多类分类"></a>2.2.3 多类分类</h4><p>定义和单类没有太大区别，就是输出层$W_2$变成了m*k,$b_2$变成了k维向量，然后对output做一次softmax</p><p><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/image-20220217165347369.png" alt="image-20220217165347369"></p><h3 id="2-3-多隐藏层"><a href="#2-3-多隐藏层" class="headerlink" title="2.3 多隐藏层"></a>2.3 多隐藏层</h3><p>每层的大小一般都是越来越小的（也可以先扩张再缩小），如果input的维度比较高可以使用多层隐藏层慢慢压缩。</p><p><img src="https://zylai-cloud-pic-1306915061.cos.ap-nanjing.myqcloud.com/images01/image-20220217170157089.png" alt="image-20220217170157089"></p><h3 id="2-4-总结"><a href="#2-4-总结" class="headerlink" title="2.4 总结"></a>2.4 总结</h3><ul><li>多层感知机使用隐藏层和激活函数来得到非线性模型</li><li>常用激活函数是Sigmoid，Tanh，ReLU（ReLU用的最多）</li><li>使用softmax来处理多类分类</li><li>超参数为隐藏层数，和各隐藏层大小</li></ul><h2 id="3-Q-amp-A"><a href="#3-Q-amp-A" class="headerlink" title="3.Q&amp;A"></a>3.Q&amp;A</h2><ul><li>1、神经网络中的一层网络到底是指什么？</li><li>一层通常是带有权重的一层，输入层不算做一层</li><li>2、数据的区域r怎么求，ρ怎么设定？实际中我们确实想找到数据分布的区域，可以找到吗？</li><li>收敛定理是统计学上的理论，数学上不去计算</li><li>3、XOR函数有什么应用呢？</li><li>没有什么用处，只是举个反例</li><li>4、是不是x轴是特征1，y轴是特征2，红蓝是他们的label？是这么对应每一条数据吗？所以感知机不能处理XOR？</li><li>对的，对于4个样本二维特征的样本都不能拟合，体现了感知机的局限性</li><li>:label:<strong>5、为什么神经网络要增加隐藏层的层数，而不是神经元的个数？</strong></li><li>网络可以采用层数少而神经元多的模型（矮胖），也可以使用层数多而神经元少的模型（高瘦）。但是，前者不好训练，后者容易训练。后者即是深度学习，前者是“浅度学习”。不好训练的原因就是需要一次拟合大量的神经元，一口气吃成胖子很难，而把一个复杂的东西分成多个步骤去学习就很容易了，所以叫“深度学习”</li><li>6、ReLU为什么管用，激活函数的本质是要做什么事？</li><li>ReLU是一个非线性的函数，激活函数的本质是引入非线性型，不再去干别的事情</li><li>7、不同任务下的激活函数是不是都不一样？</li><li>激活函数的确定不是很重要，没有特殊情况就用ReLU。你可以去选，但是没有本质的区别</li></ul>]]></content>
    
    
    <categories>
      
      <category>动手学深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pandas</title>
    <link href="/posts/d4151f7b8585/"/>
    <url>/posts/d4151f7b8585/</url>
    
    <content type="html"><![CDATA[<h1 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h1><h2 id="1、基本介绍"><a href="#1、基本介绍" class="headerlink" title="1、基本介绍"></a>1、基本介绍</h2><p>pandas类似于python的字典，一般和numpy搭配着使用。</p><ol><li>创建DataFrame，指定行和列的名称</li><li>默认名称就是索引号</li><li>传入字典构造DataFrame</li><li>查看数据类型</li><li>查看行和列的名称</li><li>转置</li><li>排序，按照索引名称排序。按照值排序</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-comment"># pd类似于字典</span><br><span class="hljs-comment"># 一般为pd和np搭配着使用</span><br>s = pd.Series([<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>,np.nan,<span class="hljs-number">44</span>,<span class="hljs-number">1</span>])<br><span class="hljs-comment"># 都是带索引的</span><br><span class="hljs-built_in">print</span>(s)<br><br><span class="hljs-comment"># 创建一个大的矩阵，在pd中叫DataFrame</span><br><span class="hljs-comment"># 这里创建一个DataFrame，行的索引为dates，列的索引为abcd，这样，每个数据都有一个名字</span><br>dates = pd.date_range(<span class="hljs-string">&#x27;20220101&#x27;</span>,periods=<span class="hljs-number">6</span>)<br><span class="hljs-built_in">print</span>(dates)<br>df = pd.DataFrame(np.random.randn(<span class="hljs-number">6</span>,<span class="hljs-number">4</span>),index=dates,columns=[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>])<br><span class="hljs-built_in">print</span>(df)<br><br><span class="hljs-comment"># 默认名称就是对应的索引0,1,2等</span><br>df1 = pd.DataFrame(np.arange(<span class="hljs-number">12</span>).reshape((<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)))<br><span class="hljs-built_in">print</span>(df1)<br><br><span class="hljs-comment"># 传入字典构造DataFrame</span><br><span class="hljs-comment"># A对应的只有一条数据，但是为了对齐，补成了4个</span><br><span class="hljs-comment"># 若都是四条数据（比如BCD），可以允许存在一条的数据（比如A），但不允许存在3条等其他数据</span><br>df2 = pd.DataFrame(&#123;<br>    <span class="hljs-string">&#x27;A&#x27;</span>:<span class="hljs-number">1.</span>,<br>    <span class="hljs-string">&#x27;B&#x27;</span>:pd.Series(<span class="hljs-number">1</span>,index=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)),dtype=<span class="hljs-string">&#x27;float32&#x27;</span>),<br>    <span class="hljs-string">&#x27;C&#x27;</span>:np.array([<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]),<br>    <span class="hljs-string">&#x27;D&#x27;</span>:np.array([<span class="hljs-string">&#x27;test&#x27;</span>,<span class="hljs-string">&#x27;train&#x27;</span>,<span class="hljs-string">&#x27;test&#x27;</span>,<span class="hljs-string">&#x27;train&#x27;</span>]),<br>    <span class="hljs-string">&#x27;E&#x27;</span>:pd.Timestamp(<span class="hljs-string">&#x27;20210101&#x27;</span>)<br>&#125;)<br><span class="hljs-built_in">print</span>(df2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;*****************&quot;</span>)<br><span class="hljs-comment"># 查看数据类型</span><br><span class="hljs-built_in">print</span>(df2.dtypes)<br><span class="hljs-comment"># 打印行索引和列索引，index和columns都是属性</span><br><span class="hljs-built_in">print</span>(df2.index)<br><span class="hljs-built_in">print</span>(df.columns)<br><span class="hljs-built_in">print</span>(df2.values)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n********1**********&quot;</span>)<br><span class="hljs-comment"># describe方法，计算数字型数据的一些属性比如方差平均值等</span><br><span class="hljs-built_in">print</span>(df2.describe())<br><br><span class="hljs-comment"># 转置</span><br><span class="hljs-built_in">print</span>(df2.T)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n**********2*********&quot;</span>)<br><span class="hljs-comment"># 排序</span><br><span class="hljs-comment"># 1.按照索引名称排序，指定排序的维度和方式</span><br><span class="hljs-comment"># 这里指定列排序，倒序</span><br><span class="hljs-built_in">print</span>(df2.sort_index(axis=<span class="hljs-number">1</span>,ascending=<span class="hljs-literal">False</span>))<br><span class="hljs-comment"># 这里按照行</span><br><span class="hljs-built_in">print</span>(df2.sort_index(axis=<span class="hljs-number">0</span>,ascending=<span class="hljs-literal">False</span>))<br><br><span class="hljs-comment"># 2.按照值排序</span><br><span class="hljs-built_in">print</span>(df2.sort_values(by=<span class="hljs-string">&#x27;D&#x27;</span>))<br></code></pre></td></tr></table></figure><h2 id="2、选择数据"><a href="#2、选择数据" class="headerlink" title="2、选择数据"></a>2、选择数据</h2><ol><li>选择列，两种选择方式，[label] 和 .label</li><li>loc，通过标签选择</li><li>iloc，通过位置选择</li><li>Boolean indexing</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>dates = pd.date_range(<span class="hljs-string">&#x27;20220101&#x27;</span>,periods=<span class="hljs-number">6</span>)<br>df = pd.DataFrame(np.arange(<span class="hljs-number">24</span>).reshape((<span class="hljs-number">6</span>,<span class="hljs-number">4</span>)),index=dates,columns = [<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;D&#x27;</span>])<br><span class="hljs-built_in">print</span>(df)<br><br><span class="hljs-comment"># 选择一列，两种选择方式，[label] 和 .label</span><br><span class="hljs-built_in">print</span>(df[<span class="hljs-string">&#x27;A&#x27;</span>])<br><span class="hljs-built_in">print</span>(df.A)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n********--1--*********&quot;</span>)<br><span class="hljs-comment"># 切片选择行,只能选择行，不可加个逗号选择列</span><br><span class="hljs-built_in">print</span>(df[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>])<br><span class="hljs-comment"># 注意，这种选择方式可以包括区间右端的值</span><br><span class="hljs-built_in">print</span>(df[<span class="hljs-string">&#x27;20220101&#x27;</span>:<span class="hljs-string">&#x27;20220104&#x27;</span>])<br><br><span class="hljs-comment"># -----几种选的方式--------</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n********--2--*********&quot;</span>)<br><span class="hljs-comment"># 通过标签选择 loc</span><br><span class="hljs-built_in">print</span>(df.loc[<span class="hljs-string">&#x27;20220101&#x27;</span>])<br><span class="hljs-comment"># 选定指定行和列,值的切片包括右侧区间值</span><br><span class="hljs-built_in">print</span>(df.loc[<span class="hljs-string">&#x27;20220102&#x27;</span>:<span class="hljs-string">&#x27;20220105&#x27;</span>,[<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>]])<br><br><span class="hljs-comment"># 通过位置选择 iloc ，就是和numpy类似了，可以切片</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n********--3--*********&quot;</span>)<br><br><span class="hljs-built_in">print</span>(df.iloc[<span class="hljs-number">3</span>])<span class="hljs-comment">#选择第三行</span><br><span class="hljs-built_in">print</span>(df.iloc[<span class="hljs-number">3</span>:<span class="hljs-number">5</span>,<span class="hljs-number">1</span>:<span class="hljs-number">3</span>])<span class="hljs-comment">#切片选择</span><br><span class="hljs-built_in">print</span>(df.iloc[[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>],<span class="hljs-number">1</span>:<span class="hljs-number">3</span>])<span class="hljs-comment">#选择指定行，切片选择列</span><br><br><span class="hljs-comment"># 混合筛选 mixed selection ix，在pandas0.20.0及其以后版本中，ix已经不被推荐使用</span><br><span class="hljs-comment"># &#x27;DataFrame&#x27; object has no attribute &#x27;ix&#x27; </span><br><span class="hljs-comment"># print(df.ix[:3,[&#x27;A&#x27;,&#x27;C&#x27;]])</span><br><br><span class="hljs-comment"># Boolean indexing</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n********--4--*********&quot;</span>)<br><span class="hljs-built_in">print</span>(df)<br><span class="hljs-comment"># df.A&lt;8等价于df[&#x27;A&#x27;]&lt;8</span><br><span class="hljs-built_in">print</span>(df[df.A&lt;<span class="hljs-number">8</span>]) <br></code></pre></td></tr></table></figure><h2 id="3、设置值"><a href="#3、设置值" class="headerlink" title="3、设置值"></a>3、设置值</h2><ol><li>iloc通过位置设置值</li><li>loc通过标签设置值</li><li>更改符合条件的值</li><li>添加一列</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>dates = pd.date_range(<span class="hljs-string">&#x27;20220101&#x27;</span>,periods=<span class="hljs-number">6</span>)<br>df = pd.DataFrame(np.arange(<span class="hljs-number">24</span>).reshape((<span class="hljs-number">6</span>,<span class="hljs-number">4</span>)),index=dates,columns = [<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;D&#x27;</span>])<br><span class="hljs-built_in">print</span>(df)<br><span class="hljs-comment"># 1.iloc设置值，通过位置</span><br>df.iloc[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>]=<span class="hljs-number">111</span><br><span class="hljs-comment"># 2.loc设置值，通过标签</span><br>df.loc[<span class="hljs-string">&#x27;20220101&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>]=<span class="hljs-number">222</span><br><span class="hljs-built_in">print</span>(df)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n********--1--*********&quot;</span>)<br><span class="hljs-comment"># 3.更改符合条件的值</span><br><span class="hljs-comment"># 更改A列中大于4的值为0</span><br>df.A[df.A&gt;<span class="hljs-number">4</span>]=<span class="hljs-number">0</span><br><span class="hljs-comment"># 等价于df.iloc[:,0][df.iloc[:,0]&gt;4]=0</span><br><span class="hljs-built_in">print</span>(df)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n********--2--*********&quot;</span>)<br><span class="hljs-comment"># 1.添加一列</span><br>df[<span class="hljs-string">&#x27;F&#x27;</span>]=np.nan<br><span class="hljs-comment"># 2.添加一个有具体值的一列，这里添加pd的一个序列，并且索引值名称要相对应</span><br>df[<span class="hljs-string">&#x27;E&#x27;</span>]=pd.Series([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>],index=pd.date_range(<span class="hljs-string">&#x27;20220101&#x27;</span>,periods=<span class="hljs-number">6</span>))<br><span class="hljs-built_in">print</span>(df)<br></code></pre></td></tr></table></figure><h2 id="4、处理丢失数据"><a href="#4、处理丢失数据" class="headerlink" title="4、处理丢失数据"></a>4、处理丢失数据</h2><ol><li>dropna</li><li>fillna</li><li>isnull</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>dates = pd.date_range(<span class="hljs-string">&#x27;20220101&#x27;</span>,periods=<span class="hljs-number">6</span>)<br>df = pd.DataFrame(np.arange(<span class="hljs-number">24</span>).reshape((<span class="hljs-number">6</span>,<span class="hljs-number">4</span>)),index=dates,columns = [<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;D&#x27;</span>])<br>df.iloc[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]=np.nan<br>df.iloc[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]=np.nan<br><span class="hljs-built_in">print</span>(df)<br><span class="hljs-comment"># 1.使用dropna axis选择除去的维度，how any表示只要这一行有nan我就把这一行丢掉，</span><br><span class="hljs-comment"># all表示只有这一行都是nan才把这一行丢掉，默认为how=any</span><br><span class="hljs-comment"># 这里axis=0表示丢掉行</span><br><span class="hljs-built_in">print</span>(df.dropna(axis=<span class="hljs-number">0</span>,how=<span class="hljs-string">&#x27;any&#x27;</span>))<br><br><span class="hljs-comment"># 2.fillna是把nan值填充为指定值</span><br><span class="hljs-built_in">print</span>(df.fillna(value=<span class="hljs-number">0</span>))<br><br><span class="hljs-comment"># 3.isnull判断数据是否为nan，返回一个矩阵，对应的元素为nan时该位置的值为True否则为False</span><br><span class="hljs-built_in">print</span>(df.isnull())<br><br><span class="hljs-comment"># 4.查看是否包含指定值，这里查看是否包含True</span><br><span class="hljs-built_in">print</span>(np.<span class="hljs-built_in">any</span>(df.isnull()==<span class="hljs-literal">True</span>))<br><br></code></pre></td></tr></table></figure><h2 id="5、导入和导出"><a href="#5、导入和导出" class="headerlink" title="5、导入和导出"></a>5、导入和导出</h2><ol><li>使用read_文件类型 读入文件</li><li>使用to_文件类型 导出文件</li><li>具体的参数使用可以查阅官方api</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><span class="hljs-comment"># 如果是vscode编译器，注意终端打开的是终端工作目录的文件夹，直接使用相对路径可能会出错</span><br><span class="hljs-comment"># 所以使用终端工作路径下的相对路径</span><br><br><span class="hljs-comment"># 读取csv文件，默认sep=&#x27;,&#x27;，这里csv使用excel工具生成的，间隔为\t,所以使用sep=&#x27;\t&#x27;去掉</span><br>data = pd.read_csv(<span class="hljs-string">&#x27;./3-pandas/student.csv&#x27;</span>,sep=<span class="hljs-string">&#x27;\t&#x27;</span>)<br><span class="hljs-built_in">print</span>(data)<br><br><span class="hljs-comment"># 导出文件</span><br>data.to_pickle(<span class="hljs-string">&#x27;./3-pandas/student.pickle&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="6、合并concat"><a href="#6、合并concat" class="headerlink" title="6、合并concat"></a>6、合并concat</h2><ol><li>使用concat合并</li><li>axis指定合并的维度</li><li><strong>join指定合并的方式</strong></li><li>append在末尾增加新行</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-comment"># concatenating</span><br>df1 = pd.DataFrame(np.ones((<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))*<span class="hljs-number">0</span>,columns=[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>])<br>df2 = pd.DataFrame(np.ones((<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))*<span class="hljs-number">1</span>,columns=[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>])<br>df3 = pd.DataFrame(np.ones((<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))*<span class="hljs-number">2</span>,columns=[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>])<br><span class="hljs-built_in">print</span>(df1)<br><span class="hljs-built_in">print</span>(df2)<br><span class="hljs-built_in">print</span>(df3)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;*********--1--***********&quot;</span>)<br><span class="hljs-comment"># 竖向合并，合并为多行</span><br><span class="hljs-comment"># axis指定合并的维度，ignore_index是忽略掉原有的索引，将索引合并</span><br>res = pd.concat([df1,df2,df3],axis=<span class="hljs-number">0</span>,ignore_index=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(res)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;*********--2--***********&quot;</span>)<br><span class="hljs-comment"># 使用join功能</span><br>df1 = pd.DataFrame(np.ones((<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))*<span class="hljs-number">0</span>,columns=[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>],index=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])<br>df1 = pd.DataFrame(np.ones((<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))*<span class="hljs-number">0</span>,columns=[<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>],index=[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>])<br><span class="hljs-comment"># print(df1)</span><br><span class="hljs-comment"># print(df2)</span><br><span class="hljs-comment"># 如果直接合并，那么二者不同的部分就会自动填充为nan，等价于join默认为outer</span><br>res = pd.concat([df1,df2],join=<span class="hljs-string">&#x27;outer&#x27;</span>)<br><span class="hljs-built_in">print</span>(res)<br><span class="hljs-comment"># 将join设置为inner，就会把不同的部分裁减掉，保留相同部分</span><br>res = pd.concat([df1,df2],join=<span class="hljs-string">&#x27;inner&#x27;</span>,ignore_index=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(res)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;*********--3--***********&quot;</span>)<br><span class="hljs-comment"># 左右合并，这里join_axes是按照df1的索引进行合并，df2没有得部分用nan代替</span><br><span class="hljs-comment"># 但是从 pandas=1.0.0 开始，就不支持 join_axes  参数了，所以这里不再演示，会在merge中学习</span><br><span class="hljs-comment"># res = pd.concat([df1,df2],axis=1,join_axes=[df1.index])</span><br><span class="hljs-comment"># print(res)</span><br><br><span class="hljs-comment"># append，在行的末尾加上新行</span><br>df1 = pd.DataFrame(np.ones((<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))*<span class="hljs-number">0</span>,columns=[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>])<br>df2 = pd.DataFrame(np.ones((<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))*<span class="hljs-number">1</span>,columns=[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>])<br>df3 = pd.DataFrame(np.ones((<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))*<span class="hljs-number">2</span>,columns=[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>])<br>res =  df1.append([df2,df3],ignore_index=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(res)<br><span class="hljs-comment"># 添加一行，series</span><br>s1 = pd.Series([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>],index=[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>])<br>res = df1.append(s1,ignore_index=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(res)<br></code></pre></td></tr></table></figure><h2 id="7、合并merge"><a href="#7、合并merge" class="headerlink" title="7、合并merge"></a>7、合并merge</h2><ol><li>on指定依据哪一列进行合并</li><li><code>how</code>指定合并的方式，left，right，outer，inner</li><li>indicator显示数据时如何合并的</li><li>根据index合并</li><li>suffixes合并</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> turtle <span class="hljs-keyword">import</span> right<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>left = pd.DataFrame(&#123;<br>    <span class="hljs-string">&#x27;key&#x27;</span>:[<span class="hljs-string">&#x27;K0&#x27;</span>,<span class="hljs-string">&#x27;K1&#x27;</span>,<span class="hljs-string">&#x27;K2&#x27;</span>,<span class="hljs-string">&#x27;K3&#x27;</span>],<br>    <span class="hljs-string">&#x27;A&#x27;</span>:[<span class="hljs-string">&#x27;A0&#x27;</span>,<span class="hljs-string">&#x27;A1&#x27;</span>,<span class="hljs-string">&#x27;A2&#x27;</span>,<span class="hljs-string">&#x27;A3&#x27;</span>],<br>    <span class="hljs-string">&#x27;B&#x27;</span>:[<span class="hljs-string">&#x27;B0&#x27;</span>,<span class="hljs-string">&#x27;B1&#x27;</span>,<span class="hljs-string">&#x27;B2&#x27;</span>,<span class="hljs-string">&#x27;B3&#x27;</span>]<br>&#125;)<br>right = pd.DataFrame(&#123;<br>    <span class="hljs-string">&#x27;key&#x27;</span>:[<span class="hljs-string">&#x27;K0&#x27;</span>,<span class="hljs-string">&#x27;K1&#x27;</span>,<span class="hljs-string">&#x27;K2&#x27;</span>,<span class="hljs-string">&#x27;K3&#x27;</span>],<br>    <span class="hljs-string">&#x27;C&#x27;</span>:[<span class="hljs-string">&#x27;C0&#x27;</span>,<span class="hljs-string">&#x27;C1&#x27;</span>,<span class="hljs-string">&#x27;C2&#x27;</span>,<span class="hljs-string">&#x27;C3&#x27;</span>],<br>    <span class="hljs-string">&#x27;D&#x27;</span>:[<span class="hljs-string">&#x27;D0&#x27;</span>,<span class="hljs-string">&#x27;D1&#x27;</span>,<span class="hljs-string">&#x27;D2&#x27;</span>,<span class="hljs-string">&#x27;C3&#x27;</span>]<br>&#125;)<br><span class="hljs-built_in">print</span>(left)<br><span class="hljs-built_in">print</span>(right)<br><span class="hljs-comment"># 使用merge进行合并，on指定合并依据哪一列</span><br>res = pd.merge(left,right,on = <span class="hljs-string">&#x27;key&#x27;</span>)<br><span class="hljs-built_in">print</span>(res)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;************--1--***************&quot;</span>)<br>left = pd.DataFrame(&#123;<br>    <span class="hljs-string">&#x27;key1&#x27;</span>:[<span class="hljs-string">&#x27;K0&#x27;</span>,<span class="hljs-string">&#x27;K0&#x27;</span>,<span class="hljs-string">&#x27;K1&#x27;</span>,<span class="hljs-string">&#x27;K2&#x27;</span>],<br>    <span class="hljs-string">&#x27;key2&#x27;</span>:[<span class="hljs-string">&#x27;K0&#x27;</span>,<span class="hljs-string">&#x27;K1&#x27;</span>,<span class="hljs-string">&#x27;K0&#x27;</span>,<span class="hljs-string">&#x27;K1&#x27;</span>],<br>    <span class="hljs-string">&#x27;A&#x27;</span>:[<span class="hljs-string">&#x27;A0&#x27;</span>,<span class="hljs-string">&#x27;A1&#x27;</span>,<span class="hljs-string">&#x27;A2&#x27;</span>,<span class="hljs-string">&#x27;A3&#x27;</span>],<br>    <span class="hljs-string">&#x27;B&#x27;</span>:[<span class="hljs-string">&#x27;B0&#x27;</span>,<span class="hljs-string">&#x27;B1&#x27;</span>,<span class="hljs-string">&#x27;B2&#x27;</span>,<span class="hljs-string">&#x27;B3&#x27;</span>]<br>&#125;)<br>right = pd.DataFrame(&#123;<br>    <span class="hljs-string">&#x27;key1&#x27;</span>:[<span class="hljs-string">&#x27;K0&#x27;</span>,<span class="hljs-string">&#x27;K1&#x27;</span>,<span class="hljs-string">&#x27;K1&#x27;</span>,<span class="hljs-string">&#x27;K2&#x27;</span>],<br>    <span class="hljs-string">&#x27;key2&#x27;</span>:[<span class="hljs-string">&#x27;K0&#x27;</span>,<span class="hljs-string">&#x27;K0&#x27;</span>,<span class="hljs-string">&#x27;K0&#x27;</span>,<span class="hljs-string">&#x27;K0&#x27;</span>],<br>    <span class="hljs-string">&#x27;C&#x27;</span>:[<span class="hljs-string">&#x27;C0&#x27;</span>,<span class="hljs-string">&#x27;C1&#x27;</span>,<span class="hljs-string">&#x27;C2&#x27;</span>,<span class="hljs-string">&#x27;C3&#x27;</span>],<br>    <span class="hljs-string">&#x27;D&#x27;</span>:[<span class="hljs-string">&#x27;D0&#x27;</span>,<span class="hljs-string">&#x27;D1&#x27;</span>,<span class="hljs-string">&#x27;D2&#x27;</span>,<span class="hljs-string">&#x27;C3&#x27;</span>]<br>&#125;)<br><span class="hljs-comment"># print(left)</span><br><span class="hljs-comment"># print(right)</span><br><span class="hljs-comment"># 默认的合并方法，是inner.即只考虑相同的key，基于相同的key合并</span><br>res = pd.merge(left,right,on=[<span class="hljs-string">&#x27;key1&#x27;</span>,<span class="hljs-string">&#x27;key2&#x27;</span>],how=<span class="hljs-string">&#x27;inner&#x27;</span>)<br><span class="hljs-built_in">print</span>(res)<br><span class="hljs-comment"># outer,对于不同的key，进行填充</span><br>res = pd.merge(left,right,on=[<span class="hljs-string">&#x27;key1&#x27;</span>,<span class="hljs-string">&#x27;key2&#x27;</span>],how=<span class="hljs-string">&#x27;outer&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;**********--outer--**********&quot;</span>)<br><span class="hljs-built_in">print</span>(res)<br><span class="hljs-comment"># how = [&#x27;left&#x27;,&#x27;right&#x27;,&#x27;outer&#x27;,&#x27;inner&#x27;]</span><br><span class="hljs-comment"># left,right就是数据库的左外连接和右外连接，即基于左侧的key合并还是基于右侧的key合并</span><br>res = pd.merge(left,right,on=[<span class="hljs-string">&#x27;key1&#x27;</span>,<span class="hljs-string">&#x27;key2&#x27;</span>],how=<span class="hljs-string">&#x27;left&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;*********--left--**********&quot;</span>)<br><span class="hljs-built_in">print</span>(res)<br><br><span class="hljs-comment"># indicator,显示数据是如何合并的</span><br>df1 = pd.DataFrame(&#123;<br>    <span class="hljs-string">&#x27;col1&#x27;</span>:[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],<br>    <span class="hljs-string">&#x27;col_left&#x27;</span>:[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>]<br>&#125;)<br>df2 = pd.DataFrame(&#123;<br>    <span class="hljs-string">&#x27;col1&#x27;</span>:[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>],<br>    <span class="hljs-string">&#x27;col_right&#x27;</span>:[<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>]<br>&#125;)<br><span class="hljs-comment"># 这里默认显示如何合并的列名为 _merge，用户可以自定义列名：indicator=&#x27;name&#x27;即可</span><br>res = pd.merge(df1,df2,on=<span class="hljs-string">&#x27;col1&#x27;</span>,how=<span class="hljs-string">&#x27;outer&#x27;</span>,indicator=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(res)<br><br><span class="hljs-comment"># 通过index合并，需要使left_index和right_left都为真即可根据index合并</span><br>left = pd.DataFrame(&#123;<br>    <span class="hljs-string">&#x27;A&#x27;</span>:[<span class="hljs-string">&#x27;A0&#x27;</span>,<span class="hljs-string">&#x27;A1&#x27;</span>,<span class="hljs-string">&#x27;A2&#x27;</span>],<br>    <span class="hljs-string">&#x27;B&#x27;</span>:[<span class="hljs-string">&#x27;B0&#x27;</span>,<span class="hljs-string">&#x27;B1&#x27;</span>,<span class="hljs-string">&#x27;B2&#x27;</span>]<br>&#125;,index = [<span class="hljs-string">&#x27;K0&#x27;</span>,<span class="hljs-string">&#x27;K1&#x27;</span>,<span class="hljs-string">&#x27;K2&#x27;</span>])<br>right = pd.DataFrame(&#123;<br>    <span class="hljs-string">&#x27;C&#x27;</span>:[<span class="hljs-string">&#x27;C0&#x27;</span>,<span class="hljs-string">&#x27;C1&#x27;</span>,<span class="hljs-string">&#x27;C2&#x27;</span>],<br>    <span class="hljs-string">&#x27;D&#x27;</span>:[<span class="hljs-string">&#x27;D0&#x27;</span>,<span class="hljs-string">&#x27;D1&#x27;</span>,<span class="hljs-string">&#x27;D2&#x27;</span>]<br>&#125;,index = [<span class="hljs-string">&#x27;K0&#x27;</span>,<span class="hljs-string">&#x27;K2&#x27;</span>,<span class="hljs-string">&#x27;K3&#x27;</span>])<br>res = pd.merge(left,right,left_index=<span class="hljs-literal">True</span>,right_index=<span class="hljs-literal">True</span>,how=<span class="hljs-string">&#x27;outer&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;*********--index--**********&quot;</span>)<br><span class="hljs-built_in">print</span>(res)<br><br><span class="hljs-comment"># suffixes对原列相同，但是表示的意义不同的列，进行重命名</span><br><span class="hljs-comment"># 比如这个，都是年龄，但是分为男孩年龄和女孩年龄，</span><br><span class="hljs-comment"># 如果直接根据关键字合并，那么只剩下age这一列，无法区分性别，所以使用suffixes</span><br>boys = pd.DataFrame(&#123;<br>    <span class="hljs-string">&#x27;k&#x27;</span>:[<span class="hljs-string">&#x27;K0&#x27;</span>,<span class="hljs-string">&#x27;K1&#x27;</span>,<span class="hljs-string">&#x27;K2&#x27;</span>],<br>    <span class="hljs-string">&#x27;age&#x27;</span>:[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>&#125;)<br>girls = pd.DataFrame(&#123;<br>    <span class="hljs-string">&#x27;k&#x27;</span>:[<span class="hljs-string">&#x27;K0&#x27;</span>,<span class="hljs-string">&#x27;K0&#x27;</span>,<span class="hljs-string">&#x27;K3&#x27;</span>],<br>    <span class="hljs-string">&#x27;age&#x27;</span>:[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]<br>&#125;)<br><span class="hljs-built_in">print</span>(boys)<br><span class="hljs-built_in">print</span>(girls)<br><span class="hljs-comment"># 这里对于K0，男孩年龄将会用age_boy表示，女孩年龄会用age_girl表示</span><br>res = pd.merge(boys,girls,on = <span class="hljs-string">&#x27;k&#x27;</span>,how = <span class="hljs-string">&#x27;outer&#x27;</span>,suffixes=[<span class="hljs-string">&#x27;_boy&#x27;</span>,<span class="hljs-string">&#x27;_girl&#x27;</span>])<br><span class="hljs-built_in">print</span>(res)<br><br></code></pre></td></tr></table></figure><h2 id="8、plot画图"><a href="#8、plot画图" class="headerlink" title="8、plot画图"></a>8、plot画图</h2><p>主要是用到matplotlib模块，这里不再详细介绍</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-comment"># plot data</span><br><br><span class="hljs-comment"># Series</span><br>data = pd.Series(np.random.randn(<span class="hljs-number">1000</span>),index=np.arange(<span class="hljs-number">1000</span>))<br><span class="hljs-comment"># 累加</span><br>data = data.cumsum()<br><span class="hljs-comment"># 在pandas中直接将数据plot就可</span><br>data.plot()<br>plt.show()<br><br><span class="hljs-comment"># DataFrame</span><br>data = pd.DataFrame(np.random.randn(<span class="hljs-number">1000</span>,<span class="hljs-number">4</span>),<span class="hljs-comment">#生成一千组数据，一组四个数据</span><br>                    index = np.arange(<span class="hljs-number">1000</span>),<br>                    columns=<span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;ABCD&#x27;</span>))<br>data = data.cumsum()<br><span class="hljs-comment"># 先查看一下前5个数据，默认为5，可以在括号中传入参数改变数据</span><br><span class="hljs-built_in">print</span>(data.head())<br>data.plot()<br>plt.show()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python数据分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>numpy</title>
    <link href="/posts/927a0c3d4668/"/>
    <url>/posts/927a0c3d4668/</url>
    
    <content type="html"><![CDATA[<h1 id="numpy"><a href="#numpy" class="headerlink" title="numpy"></a>numpy</h1><h2 id="0、作用"><a href="#0、作用" class="headerlink" title="0、作用"></a>0、作用</h2><p>使用numpy&amp;pandas使得数据分析中计算非常快，比python自带的字典和列表快很多，因为这俩模块使用C语言编写的。应用到了矩阵的运算，使用C语言实现，更快。 </p><h2 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h2><p>直接在终端使用命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install numpy<br></code></pre></td></tr></table></figure><p>安装完成即可</p><h2 id="2、numpy基本属性"><a href="#2、numpy基本属性" class="headerlink" title="2、numpy基本属性"></a>2、numpy基本属性</h2><p>基本属性包括：将列表转换为numpy的array，查看array的维度、形状、总元素个数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np <span class="hljs-comment">#一般习惯重命名为np</span><br><span class="hljs-comment"># 将列表转换为numpy的矩阵</span><br>array = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]])<br><span class="hljs-built_in">print</span>(array)<br><span class="hljs-comment"># 维度</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;number of dimation: &#x27;</span>,array.ndim)<br><span class="hljs-comment"># 形状</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;shape:&#x27;</span>,array.shape)<br><span class="hljs-comment"># 总共多少个元素在矩阵中</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;size:&#x27;</span>,array.size)<br></code></pre></td></tr></table></figure><h2 id="3、创建"><a href="#3、创建" class="headerlink" title="3、创建"></a>3、创建</h2><p>创建的方法有：</p><ol><li>直接传入列表</li><li>通过zeros()方法生成全为0的矩阵</li><li>通过ones()方法生成全为1的矩阵</li><li>通过empty()方法生成全为0的矩阵</li><li>通过arange()方法生成有序array</li><li>使用reshape指定形状，注意，元素个数可以变成指定的形状否则报错</li><li>linspace分段</li><li>使用random模块，生成随机的。随机数位于0到1之间</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-comment"># 1,直接传入列表，使用的type指定数据类型，比如float32，几位数字需要根据精度需求来确定</span><br><span class="hljs-comment"># 位数越大，精度越高但同时占用空间越大</span><br>a = np.array([[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]],dtype=np.float32)<br><span class="hljs-comment"># 打印出来，和列表的差别就是，没有逗号</span><br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(a.dtype)<br><br><span class="hljs-comment"># 2,直接生成全部为0的矩阵,需要在参数中传入形状（用一个括号包着)</span><br><span class="hljs-comment"># 如果不指定数据类型，zeros默认为float64</span><br>b = np.zeros((<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>(b)<br><span class="hljs-comment"># 同理，生成全为1的，使用ones方法即可</span><br>b = np.ones((<span class="hljs-number">4</span>,<span class="hljs-number">5</span>),dtype=np.int16)<br><span class="hljs-built_in">print</span>(b)<br><br><span class="hljs-comment"># 3,empty,相当于生成全为0的</span><br>c = np.empty((<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>(c)<br><br><span class="hljs-comment"># 4，生成有序，和python中的arange相同，指定区间（左闭右开），指定步长</span><br><span class="hljs-comment"># 步长为2,10到20之间</span><br>c = np.arange(<span class="hljs-number">10</span>,<span class="hljs-number">21</span>,<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(c)<br><br><span class="hljs-comment"># 5，使用reshape指定形状，注意，元素个数可以变成指定的形状否则报错</span><br>c = np.arange(<span class="hljs-number">12</span>).reshape((<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>(c)<br><br><span class="hljs-comment"># 6，linspace分段，在闭区间1到10中生成5个点，平均分成4段</span><br>a = np.linspace(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>,<span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(a)<br><br><span class="hljs-comment"># 7、使用random模块，生成随机的。随机数位于0到1之间</span><br>a = np.random.random((<span class="hljs-number">2</span>,<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></table></figure><h2 id="4、运算"><a href="#4、运算" class="headerlink" title="4、运算"></a>4、运算</h2><ol><li>加法、减法、指数运算、三角函数运算、布尔值运算。都是对每个元素都进行运算</li><li>矩阵乘法</li><li><ul><li>逐个元素相乘</li><li>使用dot方法矩阵相乘（线性代数的知识）</li></ul></li><li>求和，求最大值最小值，都是返回一个指定的元素</li><li>求指定维度的和、最大最小值，需要根据axis指定维度</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>a = np.array([<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>])<br>b = np.arange(<span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(a,b)<br><span class="hljs-comment"># 1、减法</span><br><span class="hljs-built_in">print</span>(a-b)<br><span class="hljs-comment"># 2、加法</span><br><span class="hljs-built_in">print</span>(a+b)<br><span class="hljs-comment"># 3、指数</span><br><span class="hljs-built_in">print</span>(a**<span class="hljs-number">2</span>)<br><span class="hljs-comment"># 4、三角函数运算</span><br><span class="hljs-comment"># print(np.sin(a),np.cos(a),np.tan(a))</span><br><span class="hljs-comment"># 5、布尔值</span><br><span class="hljs-built_in">print</span>(b)<br><span class="hljs-built_in">print</span>(b&lt;<span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(b==<span class="hljs-number">3</span>)<br><br><span class="hljs-comment">############矩阵###########</span><br>a = np.array([[<span class="hljs-number">10</span>,<span class="hljs-number">20</span>],[<span class="hljs-number">30</span>,<span class="hljs-number">45</span>]])<br>b = np.arange(<span class="hljs-number">4</span>).reshape((<span class="hljs-number">2</span>,<span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(b)<br><span class="hljs-comment"># 乘法，逐个相乘</span><br><span class="hljs-built_in">print</span>(a*b)<br><span class="hljs-comment"># 乘法，矩阵相乘，使用np.dot或者a.dot(b)</span><br><span class="hljs-built_in">print</span>(np.dot(a,b))<br><span class="hljs-built_in">print</span>(a.dot(b))<br><br><span class="hljs-comment"># 随机生成一个矩阵</span><br>a = np.random.random((<span class="hljs-number">2</span>,<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-comment"># 求和，或者写成a.sum()</span><br><span class="hljs-built_in">print</span>(np.<span class="hljs-built_in">sum</span>(a))<br><span class="hljs-comment"># 最大值</span><br><span class="hljs-built_in">print</span>(np.<span class="hljs-built_in">max</span>(a))<br><span class="hljs-comment"># 最小值</span><br><span class="hljs-built_in">print</span>(np.<span class="hljs-built_in">min</span>(a))<br><span class="hljs-comment"># 求指定维度的和，最大最小值</span><br><span class="hljs-comment"># axis为1，就是将维度为1的元素累加，该维度消失，只剩下维度为0的行</span><br><span class="hljs-built_in">print</span>(np.<span class="hljs-built_in">sum</span>(a,axis=<span class="hljs-number">1</span>))<br><span class="hljs-built_in">print</span>(np.<span class="hljs-built_in">max</span>(a,axis=<span class="hljs-number">1</span>))<br><span class="hljs-built_in">print</span>(np.<span class="hljs-built_in">min</span>(a,axis=<span class="hljs-number">0</span>))<br><span class="hljs-comment"># 另一种写法</span><br><span class="hljs-built_in">print</span>(a.<span class="hljs-built_in">min</span>(axis=<span class="hljs-number">0</span>))<br><span class="hljs-comment"># 总结，axis的值为求和的维度，运算之后该维度消失</span><br></code></pre></td></tr></table></figure><h2 id="5、运算2"><a href="#5、运算2" class="headerlink" title="5、运算2"></a>5、运算2</h2><ol><li>求最小最大值索引</li><li>求平均值，指定维度求平均值</li><li>求中位数</li><li>累加，第n个元素为原矩阵前n个元素的和</li><li>累差，原矩阵相邻元素之间的差值，列数减一</li><li>找出非0的元素，返回的值是多个表示非零元素的维度数组，数组拼接即可得到非零元素的索引值</li><li>排序，按照最小的维度排序，对于矩阵就是对行内的列元素排序</li><li>转置矩阵</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>A = np.arange(<span class="hljs-number">2</span>,<span class="hljs-number">14</span>).reshape((<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>(A)<br><span class="hljs-comment"># 最小值索引，两种写法都可</span><br><span class="hljs-built_in">print</span>(np.argmin(A))<br><span class="hljs-built_in">print</span>(A.argmin())<br><span class="hljs-comment"># 最大值索引</span><br><span class="hljs-built_in">print</span>(A.argmax())<br><span class="hljs-comment"># 求平均值</span><br><span class="hljs-built_in">print</span>(A.mean())<br><span class="hljs-comment"># 也可以指定维度</span><br><span class="hljs-built_in">print</span>(np.mean(A,axis=<span class="hljs-number">0</span>))<br><span class="hljs-built_in">print</span>(np.average(A))<br><span class="hljs-comment"># 不能这样使用average</span><br><span class="hljs-comment"># print(A.average())</span><br><br><span class="hljs-comment"># 求中位数,也是只能np.median</span><br><span class="hljs-built_in">print</span>(np.median(A))<br><span class="hljs-comment"># 累加,第n个元素为原矩阵前n个元素的和</span><br><span class="hljs-built_in">print</span>(np.cumsum(A))<br><span class="hljs-comment"># 累差，原矩阵相邻元素之间的差值，列数减一了，因为n个元素有n-1个差值</span><br><span class="hljs-built_in">print</span>(np.diff(A))<br><span class="hljs-comment"># 找出非零元素，返回维度的数组</span><br><span class="hljs-built_in">print</span>(np.nonzero(A))<br><br><span class="hljs-comment"># 排序，最小的那个维度的数进行排序。如果是矩阵，就是行内的每列元素进行排序</span><br>B = np.arange(<span class="hljs-number">14</span>,<span class="hljs-number">2</span>,-<span class="hljs-number">1</span>).reshape((<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>(B)<br><span class="hljs-comment"># 不会改变原矩阵的值</span><br><span class="hljs-built_in">print</span>(np.sort(B))<br><br><span class="hljs-comment"># 矩阵的转置，行变成列，列变成行</span><br><span class="hljs-built_in">print</span>(np.transpose(B))<br><span class="hljs-built_in">print</span>(B.T)<br><span class="hljs-built_in">print</span>((B.T).dot(B))<br><br><span class="hljs-comment"># clip，所有大于9的数都变成9，小于5的数都变成5,5到9之间的数不变</span><br><span class="hljs-built_in">print</span>(B)<br><span class="hljs-built_in">print</span>(np.clip(B,<span class="hljs-number">5</span>,<span class="hljs-number">9</span>))<br></code></pre></td></tr></table></figure><h2 id="6、索引"><a href="#6、索引" class="headerlink" title="6、索引"></a>6、索引</h2><ol><li>对于多维的索引，索引号都放在一个中括号中，用逗号分割开</li><li>切片</li><li>for迭代，默认迭代矩阵的行</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>A = np.arange(<span class="hljs-number">3</span>,<span class="hljs-number">15</span>).reshape((<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>(A)<br><span class="hljs-built_in">print</span>(A[<span class="hljs-number">2</span>])<br><span class="hljs-built_in">print</span>(A[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>])<br><span class="hljs-comment"># 多维索引都放在一个中括号中，用逗号分割</span><br><span class="hljs-built_in">print</span>(A[<span class="hljs-number">2</span>,<span class="hljs-number">1</span>])<br><br><span class="hljs-comment"># 切片</span><br><span class="hljs-comment"># 第一维度所有元素，就是原矩阵</span><br><span class="hljs-built_in">print</span>(A[:])<br><span class="hljs-comment"># 第一维度不限定，第二维度索引为1</span><br><span class="hljs-built_in">print</span>(A[:,<span class="hljs-number">1</span>])<br><span class="hljs-comment"># 切片限定第二维度（列）</span><br><span class="hljs-built_in">print</span>(A[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>:<span class="hljs-number">3</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;********************&quot;</span>)<br><br><span class="hljs-comment"># for迭代，默认迭代矩阵的行。就是第一维度</span><br><span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> A:<br>    <span class="hljs-built_in">print</span>(row)<br><span class="hljs-comment"># 迭代矩阵的列，可以通过迭代转置矩阵的列</span><br><span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> A.T:<br>    <span class="hljs-built_in">print</span>(col)<br><span class="hljs-comment"># 迭代每一个元素,flat之后是一个一维的列表</span><br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> A.flat:<br>    <span class="hljs-built_in">print</span>(item,end=<span class="hljs-string">&#x27;,&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="7、array合并"><a href="#7、array合并" class="headerlink" title="7、array合并"></a>7、array合并</h2><ol><li>使用vstack实现多个array上下合并</li><li>使用hstack实现多个array水平合并</li><li>把一个横向的数列变成纵向的数列</li><li>使用concatenate多个array的合并指定合并的维度</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>A = np.array([<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>])<br>B = np.array([<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>])<br><br><span class="hljs-comment"># 上下合并</span><br>C = np.vstack((A,B))<br><span class="hljs-built_in">print</span>(C)<br><span class="hljs-built_in">print</span>(A.shape,C.shape)<br><br><span class="hljs-comment"># 左右合并（水平合并） horizontal stack</span><br>D = np.hstack((A,B))<br><span class="hljs-built_in">print</span>(D)<br><span class="hljs-built_in">print</span>(A.shape,D.shape)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;*********************&quot;</span>)<br><span class="hljs-comment"># 如何把一个横向的数列变成纵向的数列</span><br>A = A[:,np.newaxis]<br>B = B[:,np.newaxis]<br><span class="hljs-built_in">print</span>(A.shape,B.shape)<br><span class="hljs-comment"># 左右合并，hstack和vstack都可以进行多个array的合并</span><br>D = np.hstack((A,B,B))<br><span class="hljs-built_in">print</span>(D)<br><br><span class="hljs-comment"># 多个array的合并指定合并的维度，和上面两个不同的就是可以指定合并的维度</span><br><span class="hljs-comment"># 比如，在第一维度合并，即合并行</span><br>C = np.concatenate((A,B,B,A),axis=<span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(C)<br><span class="hljs-comment"># 合并列</span><br><span class="hljs-built_in">print</span>(np.concatenate((A,B,B,A),axis=<span class="hljs-number">1</span>))<br><br></code></pre></td></tr></table></figure><h2 id="8、分割"><a href="#8、分割" class="headerlink" title="8、分割"></a>8、分割</h2><ol><li>使用split均等分割</li><li>使用array_split不均等分割</li><li>使用vsplit和hsplit进行均等分割</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>A = np.arange(<span class="hljs-number">12</span>).reshape((<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>(A)<br><span class="hljs-comment"># 均等分割，使用split均等分割</span><br><span class="hljs-built_in">print</span>(np.split(A,<span class="hljs-number">2</span>,axis=<span class="hljs-number">1</span>))<br><span class="hljs-built_in">print</span>(np.split(A,<span class="hljs-number">3</span>,axis=<span class="hljs-number">0</span>))<br><br><span class="hljs-comment"># 不均等分割，使用array_split</span><br><span class="hljs-comment"># 这里将四列分为三部分，第一部分为2列，2,3部分为1列</span><br><span class="hljs-built_in">print</span>(np.array_split(A,<span class="hljs-number">3</span>,axis=<span class="hljs-number">1</span>))<br><span class="hljs-comment"># 使用vsplit和hsplit进行分割</span><br><span class="hljs-built_in">print</span>(np.vsplit(A,<span class="hljs-number">3</span>))<br><span class="hljs-built_in">print</span>(np.hsplit(A,<span class="hljs-number">2</span>))<br><br></code></pre></td></tr></table></figure><h2 id="9、copy和deep-copy"><a href="#9、copy和deep-copy" class="headerlink" title="9、copy和deep copy"></a>9、copy和deep copy</h2><ol><li>通过 = 赋值的变量都指向同一个数据</li><li>使用copy方法使复制后两个变量不相关联</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>a = np.arange(<span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(a)<br>b = a<br>c = a<br>d = b<br><span class="hljs-comment"># 目前为止，abcd都是一样</span><br><span class="hljs-comment"># 这里更改a的值，观察其他变量的改变</span><br>a[<span class="hljs-number">0</span>]=<span class="hljs-number">11</span><br><span class="hljs-built_in">print</span>(a,b,c,d)<br><span class="hljs-built_in">print</span>(b <span class="hljs-keyword">is</span> a,c <span class="hljs-keyword">is</span> a,d <span class="hljs-keyword">is</span> a)<br><span class="hljs-comment"># 可以看到，改变了a，bcd都会改变，哪怕是通过b赋值的d</span><br><span class="hljs-comment"># 同理，改变了bcd任何一个元素，a的值也会改变</span><br><span class="hljs-comment"># 所以，通过=赋值的变量都是指向同一个数据，是浅拷贝</span><br><br><span class="hljs-comment"># 如果想让赋值后的两个变量不相关联，使用copy()方法</span><br>e = a.copy()<br><span class="hljs-built_in">print</span>(e <span class="hljs-keyword">is</span> a)<br>a[<span class="hljs-number">1</span>]=<span class="hljs-number">22</span><br><span class="hljs-built_in">print</span>(a,e)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python数据分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows上配置深度学习</title>
    <link href="/posts/aca060a7ec42/"/>
    <url>/posts/aca060a7ec42/</url>
    
    <content type="html"><![CDATA[<h3 id="1、安装miniconda"><a href="#1、安装miniconda" class="headerlink" title="1、安装miniconda"></a>1、安装miniconda</h3><p>windows下安装，去<a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/">清华大学开源镜像</a>下载，速度比较快。</p><p>选中Miniconda3-latest-Windos-x86_64.exe下载安装包（目前最新的是py3.9）<br><img src="https://img-blog.csdnimg.cn/d8d91424093149f38dbed700b5f91a53.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAZ2R4ZGVreA==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"><br>或者（py3.8版本的）（由于该课程李沐用的是3.8，所以建议3.8）：<br><img src="https://img-blog.csdnimg.cn/d1fd289253ca43b3a6d253e3290ec0ab.png#pic_center" alt="在这里插入图片描述"><br>下载完成之后双击安装即可，一般都选择默认配置即可<br><img src="https://img-blog.csdnimg.cn/851c612f28974e2d9c76bb06a5c8e2ef.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAZ2R4ZGVreA==,size_18,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/507f19365d2148929aab11947972dc29.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAZ2R4ZGVreA==,size_18,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>安装完成后，打开anaconda prompt这个终端（安装miniconda的时候会自动安装prompt到你电脑上），</p><p><img src="https://img-blog.csdnimg.cn/99eaa2b8e6394a6b89f165ae805f1089.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAZ2R4ZGVreA==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>然后分别执行如下四个命令，将conda和pip的软件源修改成为清华的源，这样的话，使用conda和pip下载安装软件包时速度会快很多。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda  config  --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/<br>conda  config  --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/<br>conda  config  --set show_channel_urls yes<br><br>pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple<br></code></pre></td></tr></table></figure><h3 id="2、创建新的conda环境"><a href="#2、创建新的conda环境" class="headerlink" title="2、创建新的conda环境"></a>2、创建新的conda环境</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">conda <span class="hljs-built_in">create</span> <span class="hljs-comment">--name d2l python=3.8 -y</span><span class="hljs-comment"></span><br><span class="hljs-comment">//激活环境</span><br>conda activate d2l<br></code></pre></td></tr></table></figure><h3 id="3、安装深度学习框架和d2l的软件包"><a href="#3、安装深度学习框架和d2l的软件包" class="headerlink" title="3、安装深度学习框架和d2l的软件包"></a>3、安装深度学习框架和d2l的软件包</h3><blockquote><p>这里一定确保先配置好了清华镜像源，否则很慢</p></blockquote><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">pip <span class="hljs-keyword">install </span><span class="hljs-keyword">jupyter </span>d2l torch torchvision<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/520b1d020d6c4ee3aab949205290bc74.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAZ2R4ZGVreA==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>安装记事本，建议从网站上下载jupyter记事本解压后放到本地文件夹下</p><p><img src="https://img-blog.csdnimg.cn/9410a7e7f9cb436c9a8cdf234d256090.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAZ2R4ZGVreA==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>在记事本目录下执行 <code>jupyter notebook</code>命令便可以在本机的8888端口打开jupyter了（一般会自动打开浏览器）<br><img src="https://img-blog.csdnimg.cn/f5680d86e1a1438da5ba37b92dbf90b4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAZ2R4ZGVreA==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/1ea9363d48904e54b30c451da2548844.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAZ2R4ZGVreA==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>由此，你可以运行这本书中每个部分的代码。 在运行书籍代码、更新深度学习框架或<code>d2l</code>软件包之前，请始终执行<code>conda activate d2l</code>以激活运行时环境。 要退出环境，请运行<code>conda deactivate</code>。</p>]]></content>
    
    
    <categories>
      
      <category>动手学深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>testPicture</title>
    <link href="/posts/fce38e94ddd0/"/>
    <url>/posts/fce38e94ddd0/</url>
    
    <content type="html"><![CDATA[<p><img src="https://img2018.cnblogs.com/blog/1630213/201907/1630213-20190723203639142-1615559815.png" alt="博客园的图片"></p><p><img src="https://img-blog.csdnimg.cn/d8d91424093149f38dbed700b5f91a53.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAZ2R4ZGVreA==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="csdn的图片"></p><p><img src="https://zylcos01-1306915061.cos.ap-nanjing.myqcloud.com/markdown01/image-20220217115523159.png" alt="我的腾讯云cos（南京bucket）的图片"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/posts/d812ac0ec5a4/"/>
    <url>/posts/d812ac0ec5a4/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
